{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport { useMap } from 'react-leaflet'; // Use context to interact with the Leaflet map\nimport L from 'leaflet'; // Leaflet for map functionality\nimport { scaleLinear } from 'd3'; // D3 scale for colors\nimport * as d3 from 'd3'; // D3 for utility functions\n\nexport const BubbleMap = ({\n  data,\n  colorScale\n}) => {\n  _s();\n  const map = useMap(); // Grab the Leaflet map instance\n\n  // Render hexagons based on data\n  React.useEffect(() => {\n    const hexbinLayer = L.layerGroup().addTo(map); // Create a layer group for hexagons\n\n    data.forEach(point => {\n      const coords = point.LocationCoordinates;\n\n      // Ensure coordinates are valid\n      if (coords && coords.length === 2) {\n        const hexagon = generateHexagon(coords[1], coords[0], 20); // Create hexagon vertices\n\n        // Create and add hexagon to the map\n        L.polygon(hexagon, {\n          color: colorScale(point.HRV),\n          // Use color scale based on HRV\n          fillColor: colorScale(point.HRV),\n          fillOpacity: 0.6,\n          weight: 1\n        }).addTo(hexbinLayer); // Add hexagon to the hexbin layer\n      } else {\n        console.error(\"Invalid coordinates for point:\", point);\n      }\n    });\n    return () => {\n      map.removeLayer(hexbinLayer); // Cleanup on component unmount\n    };\n  }, [data, map, colorScale]); // Added colorScale as a dependency\n\n  // Function to generate hexagon vertices based on center coordinates and radius\n  const generateHexagon = (lat, lng, radius) => {\n    const angle = Math.PI / 3; // 60 degrees\n    const points = [];\n    for (let i = 0; i < 6; i++) {\n      points.push([lat + radius * Math.sin(angle * i),\n      // Latitude adjustment\n      lng + radius * Math.cos(angle * i) // Longitude adjustment\n      ]);\n    }\n    return points; // Return the vertices of the hexagon\n  };\n  return null; // No direct rendering\n};\n_s(BubbleMap, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = BubbleMap;\nvar _c;\n$RefreshReg$(_c, \"BubbleMap\");","map":{"version":3,"names":["React","useMap","L","scaleLinear","d3","BubbleMap","data","colorScale","_s","map","useEffect","hexbinLayer","layerGroup","addTo","forEach","point","coords","LocationCoordinates","length","hexagon","generateHexagon","polygon","color","HRV","fillColor","fillOpacity","weight","console","error","removeLayer","lat","lng","radius","angle","Math","PI","points","i","push","sin","cos","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js"],"sourcesContent":["import React from 'react';\nimport { useMap } from 'react-leaflet'; // Use context to interact with the Leaflet map\nimport L from 'leaflet'; // Leaflet for map functionality\nimport { scaleLinear } from 'd3'; // D3 scale for colors\nimport * as d3 from 'd3'; // D3 for utility functions\n\nexport const BubbleMap = ({ data, colorScale }) => {\n    const map = useMap(); // Grab the Leaflet map instance\n\n    // Render hexagons based on data\n    React.useEffect(() => {\n        const hexbinLayer = L.layerGroup().addTo(map); // Create a layer group for hexagons\n\n        data.forEach(point => {\n            const coords = point.LocationCoordinates;\n\n            // Ensure coordinates are valid\n            if (coords && coords.length === 2) {\n                const hexagon = generateHexagon(coords[1], coords[0], 20); // Create hexagon vertices\n\n                // Create and add hexagon to the map\n                L.polygon(hexagon, {\n                    color: colorScale(point.HRV), // Use color scale based on HRV\n                    fillColor: colorScale(point.HRV),\n                    fillOpacity: 0.6,\n                    weight: 1,\n                }).addTo(hexbinLayer); // Add hexagon to the hexbin layer\n            } else {\n                console.error(\"Invalid coordinates for point:\", point);\n            }\n        });\n\n        return () => {\n            map.removeLayer(hexbinLayer); // Cleanup on component unmount\n        };\n    }, [data, map, colorScale]); // Added colorScale as a dependency\n\n    // Function to generate hexagon vertices based on center coordinates and radius\n    const generateHexagon = (lat, lng, radius) => {\n        const angle = (Math.PI / 3); // 60 degrees\n        const points = [];\n        for (let i = 0; i < 6; i++) {\n            points.push([\n                lat + (radius * Math.sin(angle * i)), // Latitude adjustment\n                lng + (radius * Math.cos(angle * i))  // Longitude adjustment\n            ]);\n        }\n        return points; // Return the vertices of the hexagon\n    };\n\n    return null; // No direct rendering\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,eAAe,CAAC,CAAC;AACxC,OAAOC,CAAC,MAAM,SAAS,CAAC,CAAC;AACzB,SAASC,WAAW,QAAQ,IAAI,CAAC,CAAC;AAClC,OAAO,KAAKC,EAAE,MAAM,IAAI,CAAC,CAAC;;AAE1B,OAAO,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAMC,GAAG,GAAGR,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEtB;EACAD,KAAK,CAACU,SAAS,CAAC,MAAM;IAClB,MAAMC,WAAW,GAAGT,CAAC,CAACU,UAAU,CAAC,CAAC,CAACC,KAAK,CAACJ,GAAG,CAAC,CAAC,CAAC;;IAE/CH,IAAI,CAACQ,OAAO,CAACC,KAAK,IAAI;MAClB,MAAMC,MAAM,GAAGD,KAAK,CAACE,mBAAmB;;MAExC;MACA,IAAID,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;QAC/B,MAAMC,OAAO,GAAGC,eAAe,CAACJ,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;QAE3D;QACAd,CAAC,CAACmB,OAAO,CAACF,OAAO,EAAE;UACfG,KAAK,EAAEf,UAAU,CAACQ,KAAK,CAACQ,GAAG,CAAC;UAAE;UAC9BC,SAAS,EAAEjB,UAAU,CAACQ,KAAK,CAACQ,GAAG,CAAC;UAChCE,WAAW,EAAE,GAAG;UAChBC,MAAM,EAAE;QACZ,CAAC,CAAC,CAACb,KAAK,CAACF,WAAW,CAAC,CAAC,CAAC;MAC3B,CAAC,MAAM;QACHgB,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEb,KAAK,CAAC;MAC1D;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACTN,GAAG,CAACoB,WAAW,CAAClB,WAAW,CAAC,CAAC,CAAC;IAClC,CAAC;EACL,CAAC,EAAE,CAACL,IAAI,EAAEG,GAAG,EAAEF,UAAU,CAAC,CAAC,CAAC,CAAC;;EAE7B;EACA,MAAMa,eAAe,GAAGA,CAACU,GAAG,EAAEC,GAAG,EAAEC,MAAM,KAAK;IAC1C,MAAMC,KAAK,GAAIC,IAAI,CAACC,EAAE,GAAG,CAAE,CAAC,CAAC;IAC7B,MAAMC,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxBD,MAAM,CAACE,IAAI,CAAC,CACRR,GAAG,GAAIE,MAAM,GAAGE,IAAI,CAACK,GAAG,CAACN,KAAK,GAAGI,CAAC,CAAE;MAAE;MACtCN,GAAG,GAAIC,MAAM,GAAGE,IAAI,CAACM,GAAG,CAACP,KAAK,GAAGI,CAAC,CAAE,CAAE;MAAA,CACzC,CAAC;IACN;IACA,OAAOD,MAAM,CAAC,CAAC;EACnB,CAAC;EAED,OAAO,IAAI,CAAC,CAAC;AACjB,CAAC;AAAC5B,EAAA,CA7CWH,SAAS;EAAA,QACNJ,MAAM;AAAA;AAAAwC,EAAA,GADTpC,SAAS;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}