{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 3/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { MapContainer, TileLayer } from 'react-leaflet'; // Importing Leaflet components\nimport { useData } from './useData'; // Import the hook to get data\nimport { BubbleMap } from './BubbleMap/index.js'; // Import the BubbleMap component\nimport { DateHistogram } from './DateHistogram/index.js'; // Import the DateHistogram component\nimport { scaleLinear } from 'd3'; // For D3 scales\nimport ColorLegend from './BubbleMap/ColorLegend'; // Import ColorLegend\nimport * as d3 from 'd3'; // D3 for utility functions\nimport './App.css';\nimport 'leaflet/dist/leaflet.css'; // Leaflet styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const data = useData(); // Use the JSON data\n  const [brushExtent, setBrushExtent] = useState(null);\n  if (!data || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this);\n  }\n  const filteredData = brushExtent ? data.filter(d => {\n    const date = d.Timestamp; // Modify this to match your filtering needs\n    return date >= brushExtent[0] && date <= brushExtent[1];\n  }) : data;\n  const hrvValues = filteredData.map(d => d.HRV).filter(h => h != null);\n  const colorScale = scaleLinear().domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0]).range(['lightblue', 'blue', 'darkblue']); // Set your color range\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [52.3, 10.5],\n      zoom: 10,\n      style: {\n        height: \"100%\",\n        width: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(BubbleMap, {\n        data: filteredData,\n        colorScale: colorScale\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"KbjHygebxu2KAJG0RyuWHFaH+nw=\", false, function () {\n  return [useData];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MapContainer","TileLayer","useData","BubbleMap","DateHistogram","scaleLinear","ColorLegend","d3","jsxDEV","_jsxDEV","App","_s","data","brushExtent","setBrushExtent","length","children","fileName","_jsxFileName","lineNumber","columnNumber","filteredData","filter","d","date","Timestamp","hrvValues","map","HRV","h","colorScale","domain","min","mean","max","range","style","height","center","zoom","width","url","attribution","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { MapContainer, TileLayer } from 'react-leaflet'; // Importing Leaflet components\nimport { useData } from './useData'; // Import the hook to get data\nimport { BubbleMap } from './BubbleMap/index.js'; // Import the BubbleMap component\nimport { DateHistogram } from './DateHistogram/index.js'; // Import the DateHistogram component\nimport { scaleLinear } from 'd3'; // For D3 scales\nimport ColorLegend from './BubbleMap/ColorLegend'; // Import ColorLegend\nimport * as d3 from 'd3'; // D3 for utility functions\nimport './App.css'; \nimport 'leaflet/dist/leaflet.css'; // Leaflet styles\n\nconst App = () => {\n    const data = useData(); // Use the JSON data\n    const [brushExtent, setBrushExtent] = useState(null);\n\n    if (!data || data.length === 0) {\n        return (\n            <div>Loading...</div>\n        ); \n    }\n\n    const filteredData = brushExtent\n        ? data.filter(d => {\n            const date = d.Timestamp; // Modify this to match your filtering needs\n            return date >= brushExtent[0] && date <= brushExtent[1];\n        })\n        : data;\n\n    const hrvValues = filteredData.map(d => d.HRV).filter(h => h != null); \n    const colorScale = scaleLinear()\n        .domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0])\n        .range(['lightblue', 'blue', 'darkblue']); // Set your color range\n\n    return (\n        <div style={{ height: \"100vh\" }}>\n            <MapContainer center={[52.3, 10.5]} zoom={10} style={{ height: \"100%\", width: \"100%\" }}>\n            \n                \n               <BubbleMap data={filteredData} colorScale={colorScale} />\n\n               <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution=\"&copy; OpenStreetMap contributors\"\n                />\n            </MapContainer>\n\n            {/* Any additional overlays like legends or histograms can be added here */}\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}