{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 5/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport './App.css';\nimport { useData } from './useData';\nimport { Hexbinmap } from './HexbinMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\nimport { scaleLinear } from 'd3';\nimport ColorLegend from './HexbinMap/ColorLegend.js';\nimport * as d3 from 'd3';\nimport Filters from './Filters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 900;\nconst height = 800; // Overall height for the SVG\nconst hexbinHeight = 500; // Increase height for the hexbin area\nconst dateHistogramSize = 0.2; // Adjust size proportion for histogram\nconst orderedDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nconst App = () => {\n  _s();\n  const worldAtlas = useWorldAtlas();\n  const data = useData();\n  const [brushExtent, setBrushExtent] = useState(null);\n  const [participant, setParticipant] = useState(\"All\");\n  const [gender, setGender] = useState(\"Both\");\n  const [modeButton, setModeButton] = useState(\"Both\");\n  const [yValueField, setYValueField] = useState(\"HRV\");\n  if (!worldAtlas || !data || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: /*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: height / 2,\n        textAnchor: \"middle\",\n        fontSize: \"14\",\n        fill: \"black\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }, this);\n  }\n\n  // Get unique participants dynamically and sort them\n  const uniqueParticipants = Array.from(new Set(data.map(d => d.Participant))).sort((a, b) => a - b); // Sort values from smallest to largest\n\n  // Filter Data based on selected criteria\n  const filteredData = data.filter(d => {\n    const participantFilter = participant === \"All\" || d.Participant.toString() === participant;\n    const genderFilter = gender === \"Both\" || d.Gender === gender;\n    const modeButtonFilter = modeButton === \"Both\" || d.ModeButton_xs === modeButton;\n    return participantFilter && genderFilter && modeButtonFilter;\n  });\n  const hrvValues = filteredData.map(d => d[yValueField]).filter(h => h != null);\n  const colorScale = scaleLinear().domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0]).range(['lightblue', 'blue', 'darkblue']);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: /*#__PURE__*/_jsxDEV(Filters, {\n        participant: participant,\n        setParticipant: setParticipant,\n        gender: gender,\n        setGender: setGender,\n        modeButton: modeButton,\n        setModeButton: setModeButton,\n        yValueField: yValueField,\n        setYValueField: setYValueField,\n        uniqueParticipants: uniqueParticipants\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: [/*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: 40,\n        textAnchor: \"middle\",\n        className: \"title\",\n        children: \"THE HRV DISTRIBUTION\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"image\", {\n        href: \"dlr.png\",\n        x: \"800\",\n        y: \"10\",\n        height: \"10px\",\n        width: \"auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(0, 10)`,\n        children: /*#__PURE__*/_jsxDEV(Hexbinmap, {\n          data: brushExtent ? filteredData.filter(d => brushExtent.includes(orderedDays[d.DayOrder])) : [],\n          worldAtlas: worldAtlas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(0, ${hexbinHeight + 20})`,\n        children: /*#__PURE__*/_jsxDEV(DateHistogram, {\n          data: filteredData,\n          width: width,\n          height: height - hexbinHeight - 40 // Resize remaining height for histogram\n          ,\n          setBrushExtent: setBrushExtent,\n          xValue: d => d.DayOrder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(700, 350)`,\n        children: /*#__PURE__*/_jsxDEV(ColorLegend, {\n          colorScale: colorScale\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"r4lMho1XQ4f694ezHYNK4lfCIGE=\", false, function () {\n  return [useWorldAtlas, useData];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useWorldAtlas","useData","Hexbinmap","DateHistogram","scaleLinear","ColorLegend","d3","Filters","jsxDEV","_jsxDEV","width","height","hexbinHeight","dateHistogramSize","orderedDays","App","_s","worldAtlas","data","brushExtent","setBrushExtent","participant","setParticipant","gender","setGender","modeButton","setModeButton","yValueField","setYValueField","length","children","x","y","textAnchor","fontSize","fill","fileName","_jsxFileName","lineNumber","columnNumber","uniqueParticipants","Array","from","Set","map","d","Participant","sort","a","b","filteredData","filter","participantFilter","toString","genderFilter","Gender","modeButtonFilter","ModeButton_xs","hrvValues","h","colorScale","domain","min","mean","max","range","style","display","className","href","transform","includes","DayOrder","xValue","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 5/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport './App.css';\nimport { useData } from './useData';\nimport { Hexbinmap } from './HexbinMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\nimport { scaleLinear } from 'd3';\nimport ColorLegend from './HexbinMap/ColorLegend.js'; \nimport * as d3 from 'd3'; \nimport Filters from './Filters'; \n\nconst width = 900;\nconst height = 800; // Overall height for the SVG\nconst hexbinHeight = 500; // Increase height for the hexbin area\nconst dateHistogramSize = 0.2; // Adjust size proportion for histogram\nconst orderedDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]; \n\nconst App = () => {\n    const worldAtlas = useWorldAtlas();\n    const data = useData(); \n\n    const [brushExtent, setBrushExtent] = useState(null);\n    const [participant, setParticipant] = useState(\"All\");\n    const [gender, setGender] = useState(\"Both\");\n    const [modeButton, setModeButton] = useState(\"Both\");\n    const [yValueField, setYValueField] = useState(\"HRV\");\n\n    if (!worldAtlas || !data || data.length === 0) {\n        return (\n          <svg width={width} height={height}>\n            <text\n              x={width / 2} \n              y={height / 2} \n              textAnchor=\"middle\" \n              fontSize=\"14\" \n              fill=\"black\" \n            >\n              Loading...\n            </text>\n          </svg>\n        ); \n    }\n\n    // Get unique participants dynamically and sort them\n    const uniqueParticipants = Array.from(new Set(data.map(d => d.Participant)))\n        .sort((a, b) => a - b); // Sort values from smallest to largest\n\n    // Filter Data based on selected criteria\n    const filteredData = data.filter(d => {\n        const participantFilter = participant === \"All\" || d.Participant.toString() === participant;\n        const genderFilter = gender === \"Both\" || d.Gender === gender; \n        const modeButtonFilter = modeButton === \"Both\" || d.ModeButton_xs === modeButton;\n        \n        return participantFilter && genderFilter && modeButtonFilter;\n    });\n\n    const hrvValues = filteredData.map(d => d[yValueField]).filter(h => h != null); \n    const colorScale = scaleLinear()\n        .domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0])\n        .range(['lightblue', 'blue', 'darkblue']); \n\n    return (\n        <div style={{ display: 'flex' }}>\n            <div className=\"filters\">\n                <Filters \n                    participant={participant} \n                    setParticipant={setParticipant} \n                    gender={gender} \n                    setGender={setGender} \n                    modeButton={modeButton} \n                    setModeButton={setModeButton}\n                    yValueField={yValueField}\n                    setYValueField={setYValueField}\n                    uniqueParticipants={uniqueParticipants} \n                />\n            </div>\n            <svg width={width} height={height}>\n                <text\n                    x={width / 2} \n                    y={40} \n                    textAnchor=\"middle\" \n                    className=\"title\" \n                >\n                    THE HRV DISTRIBUTION\n                </text>\n                \n                <image \n                    href=\"dlr.png\" \n                    x=\"800\" \n                    y=\"10\" \n                    height=\"10px\" \n                    width=\"auto\" \n                />\n                \n                <g transform={`translate(0, 10)`}>\n                    <Hexbinmap \n                        data={brushExtent ? filteredData.filter(d => brushExtent.includes(orderedDays[d.DayOrder])) : []} \n                        worldAtlas={worldAtlas} \n                    />\n                </g>\n                <g transform={`translate(0, ${hexbinHeight + 20})`}>\n                    <DateHistogram\n                        data={filteredData} \n                        width={width}\n                        height={(height - hexbinHeight - 40)} // Resize remaining height for histogram\n                        setBrushExtent={setBrushExtent}\n                        xValue={d => d.DayOrder} \n                    />\n                </g>\n\n                <g transform={`translate(700, 350)`}>\n                    <ColorLegend colorScale={colorScale} /> \n                </g>\n            </svg>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}