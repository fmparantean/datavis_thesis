{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client'; // Ensure you have topojso-client installed\n\nconst jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';\nexport const useWorldAtlas = () => {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    json(jsonUrl).then(topology => {\n      const {\n        countries,\n        land\n      } = topology.objects;\n      const atlasData = {\n        land: feature(topology, land),\n        interiors: mesh(topology, countries, (a, b) => a !== b)\n      };\n      console.log(\"World Atlas Data:\", atlasData); // Debug log\n      setData(atlasData);\n    }).catch(error => {\n      console.error(\"Error fetching world atlas data:\", error); // Error log\n      setData(null); // Optional: set to null or some default state\n    });\n  }, []);\n  return data; // Return the processed data for use\n};\n_s(useWorldAtlas, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");","map":{"version":3,"names":["useState","useEffect","json","feature","mesh","jsonUrl","useWorldAtlas","_s","data","setData","then","topology","countries","land","objects","atlasData","interiors","a","b","console","log","catch","error"],"sources":["/Users/fmparantean/bubblemap/src/useWorldAtlas.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client'; // Ensure you have topojso-client installed\n\nconst jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';\n\nexport const useWorldAtlas = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    json(jsonUrl)\n      .then(topology => {\n        const { countries, land } = topology.objects;\n        const atlasData = {\n          land: feature(topology, land),\n          interiors: mesh(topology, countries, (a, b) => a !== b)\n        };\n        console.log(\"World Atlas Data:\", atlasData); // Debug log\n        setData(atlasData);\n      })\n      .catch(error => {\n        console.error(\"Error fetching world atlas data:\", error); // Error log\n        setData(null); // Optional: set to null or some default state\n      });\n  }, []);\n\n  return data; // Return the processed data for use\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,IAAI,QAAQ,IAAI;AACzB,SAASC,OAAO,EAAEC,IAAI,QAAQ,iBAAiB,CAAC,CAAC;;AAEjD,MAAMC,OAAO,GAAG,wDAAwD;AAExE,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdC,IAAI,CAACG,OAAO,CAAC,CACVK,IAAI,CAACC,QAAQ,IAAI;MAChB,MAAM;QAAEC,SAAS;QAAEC;MAAK,CAAC,GAAGF,QAAQ,CAACG,OAAO;MAC5C,MAAMC,SAAS,GAAG;QAChBF,IAAI,EAAEV,OAAO,CAACQ,QAAQ,EAAEE,IAAI,CAAC;QAC7BG,SAAS,EAAEZ,IAAI,CAACO,QAAQ,EAAEC,SAAS,EAAE,CAACK,CAAC,EAAEC,CAAC,KAAKD,CAAC,KAAKC,CAAC;MACxD,CAAC;MACDC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,SAAS,CAAC,CAAC,CAAC;MAC7CN,OAAO,CAACM,SAAS,CAAC;IACpB,CAAC,CAAC,CACDM,KAAK,CAACC,KAAK,IAAI;MACdH,OAAO,CAACG,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC,CAAC,CAAC;MAC1Db,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOD,IAAI,CAAC,CAAC;AACf,CAAC;AAACD,EAAA,CArBWD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}