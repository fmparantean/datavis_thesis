{"ast":null,"code":"import{useState,useEffect}from'react';import{json}from'd3';import{feature,mesh}from'topojson';const jsonUrl='https://unpkg.com/world-atlas@2.0.2/countries-50m.json';export const useWorldAtlas=()=>{const[data,setData]=useState(null);useEffect(()=>{json(jsonUrl).then(topology=>{const{countries,land}=topology.objects;setData({land:feature(topology,land),interiors:mesh(topology,countries,(a,b)=>a!==b)});});},[]);return data;};","map":{"version":3,"names":["useState","useEffect","json","feature","mesh","jsonUrl","useWorldAtlas","data","setData","then","topology","countries","land","objects","interiors","a","b"],"sources":["/Users/fmparantean/Documents/dataviz_project/src/useWorldAtlas.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson';\n\nconst jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';\n\nexport const useWorldAtlas = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    json(jsonUrl).then(topology => {\n      const { countries, land } = topology.objects;\n      setData({\n        land: feature(topology, land),\n        interiors: mesh(topology, countries, (a, b) => a !== b)\n      });\n    });\n  }, []);\n\n  return data;\n};\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,IAAI,KAAQ,IAAI,CACzB,OAASC,OAAO,CAAEC,IAAI,KAAQ,UAAU,CAExC,KAAM,CAAAC,OAAO,CAAG,wDAAwD,CAExE,MAAO,MAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CACjC,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CAEtCC,SAAS,CAAC,IAAM,CACdC,IAAI,CAACG,OAAO,CAAC,CAACI,IAAI,CAACC,QAAQ,EAAI,CAC7B,KAAM,CAAEC,SAAS,CAAEC,IAAK,CAAC,CAAGF,QAAQ,CAACG,OAAO,CAC5CL,OAAO,CAAC,CACNI,IAAI,CAAET,OAAO,CAACO,QAAQ,CAAEE,IAAI,CAAC,CAC7BE,SAAS,CAAEV,IAAI,CAACM,QAAQ,CAAEC,SAAS,CAAE,CAACI,CAAC,CAAEC,CAAC,GAAKD,CAAC,GAAKC,CAAC,CACxD,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAT,IAAI,CACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}