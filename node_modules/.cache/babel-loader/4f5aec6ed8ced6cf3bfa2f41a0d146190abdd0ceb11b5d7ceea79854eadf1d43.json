{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 5/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport './App.css';\nimport { useData } from './useData';\nimport { Hexbinmap } from './HexbinMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\nimport { scaleLinear } from 'd3';\nimport ColorLegend from './HexbinMap/ColorLegend.js'; // Import ColorLegend\nimport * as d3 from 'd3'; // Import d3 for scales\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 900;\nconst height = 750;\nconst dateHistogramSize = 0.27;\nconst orderedDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]; // Adjusted order\n\nconst App = () => {\n  _s();\n  const worldAtlas = useWorldAtlas();\n  const data = useData(); // Use the JSON data\n\n  const [brushExtent, setBrushExtent] = useState(null);\n  if (!worldAtlas || !data || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: /*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: height / 2,\n        textAnchor: \"middle\",\n        fontSize: \"14\",\n        fill: \"black\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }, this);\n  }\n\n  // Keep the full dataset for the histogram\n  const fullData = data;\n\n  // Filter data for hexbin map using brush extent\n  const filteredHexbinData = brushExtent ? data.filter(d => brushExtent.includes(orderedDays[d.DayOrder])) : data;\n  const hrvValues = fullData.map(d => d.HRV).filter(h => h != null);\n  const colorScale = scaleLinear().domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0]).range(['lightblue', 'blue', 'darkblue']); // Set your color range\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: width,\n    height: height,\n    children: [/*#__PURE__*/_jsxDEV(\"text\", {\n      x: width / 2,\n      y: 40,\n      textAnchor: \"middle\",\n      className: \"title\",\n      children: \"THE HRV DISTRIBUTION\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"image\", {\n      href: \"dlr.png\" // Adjust the path to your logo image\n      ,\n      x: \"800\",\n      y: \"10\",\n      height: \"10px\",\n      width: \"auto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(0, 10)`,\n      children: /*#__PURE__*/_jsxDEV(Hexbinmap, {\n        data: filteredHexbinData,\n        worldAtlas: worldAtlas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(0, ${height - dateHistogramSize * height})`,\n      children: /*#__PURE__*/_jsxDEV(DateHistogram, {\n        data: fullData // Always display the full dataset in histogram\n        ,\n        width: width,\n        height: dateHistogramSize * height,\n        setBrushExtent: setBrushExtent,\n        xValue: d => d.DayOrder // Use DayOrder directly for x values\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(700, 350)`,\n      children: /*#__PURE__*/_jsxDEV(ColorLegend, {\n        colorScale: colorScale\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"qNrp+cqz1K4ohBQ5elzPglsfMNY=\", false, function () {\n  return [useWorldAtlas, useData];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useWorldAtlas","useData","Hexbinmap","DateHistogram","scaleLinear","ColorLegend","d3","jsxDEV","_jsxDEV","width","height","dateHistogramSize","orderedDays","App","_s","worldAtlas","data","brushExtent","setBrushExtent","length","children","x","y","textAnchor","fontSize","fill","fileName","_jsxFileName","lineNumber","columnNumber","fullData","filteredHexbinData","filter","d","includes","DayOrder","hrvValues","map","HRV","h","colorScale","domain","min","mean","max","range","className","href","transform","xValue","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 5/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport './App.css';\nimport { useData } from './useData';\nimport { Hexbinmap } from './HexbinMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\nimport { scaleLinear } from 'd3';\nimport ColorLegend from './HexbinMap/ColorLegend.js'; // Import ColorLegend\nimport * as d3 from 'd3'; // Import d3 for scales\n\nconst width = 900;\nconst height = 750;\nconst dateHistogramSize = 0.27;\nconst orderedDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]; // Adjusted order\n\nconst App = () => {\n    const worldAtlas = useWorldAtlas();\n    const data = useData(); // Use the JSON data\n\n    const [brushExtent, setBrushExtent] = useState(null);\n\n    if (!worldAtlas || !data || data.length === 0) {\n        return (\n          <svg width={width} height={height}>\n            <text\n              x={width / 2} \n              y={height / 2} \n              textAnchor=\"middle\" \n              fontSize=\"14\" \n              fill=\"black\" \n            >\n              Loading...\n            </text>\n          </svg>\n        ); \n    }\n\n    // Keep the full dataset for the histogram\n    const fullData = data;\n\n    // Filter data for hexbin map using brush extent\n    const filteredHexbinData = brushExtent \n        ? data.filter(d => brushExtent.includes(orderedDays[d.DayOrder])) \n        : data;\n\n    const hrvValues = fullData.map(d => d.HRV).filter(h => h != null);\n    const colorScale = scaleLinear()\n        .domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0])\n        .range(['lightblue', 'blue', 'darkblue']); // Set your color range\n\n    return (\n        <svg width={width} height={height}>\n            <text\n                x={width / 2} \n                y={40} \n                textAnchor=\"middle\" \n                className=\"title\" \n            >\n                THE HRV DISTRIBUTION\n            </text>\n           \n            <image \n                href=\"dlr.png\" // Adjust the path to your logo image\n                x=\"800\" \n                y=\"10\" \n                height=\"10px\" \n                width=\"auto\" \n            />\n            \n            <g transform={`translate(0, 10)`}>\n                <Hexbinmap data={filteredHexbinData} worldAtlas={worldAtlas} />\n            </g>\n            <g transform={`translate(0, ${height - dateHistogramSize * height})`}>\n                <DateHistogram\n                    data={fullData}  // Always display the full dataset in histogram\n                    width={width}\n                    height={dateHistogramSize * height}\n                    setBrushExtent={setBrushExtent}\n                    xValue={d => d.DayOrder} // Use DayOrder directly for x values\n                />\n            </g>\n\n            <g transform={`translate(700, 350)`}>\n                <ColorLegend colorScale={colorScale} /> \n            </g>\n        </svg>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}