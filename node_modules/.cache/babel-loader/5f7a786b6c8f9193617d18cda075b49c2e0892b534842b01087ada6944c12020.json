{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js\";\nimport React from 'react';\nimport { hexbin } from 'd3-hexbin';\nimport { geoNaturalEarth1 } from 'd3';\nimport { Marks } from './Marks';\nimport { Markscity } from './Markscity';\nimport ColorLegend from './ColorLegend'; // Import the legend\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const BubbleMap = ({\n  data,\n  worldAtlas\n}) => {\n  const svgWidth = 900;\n  const svgHeight = 750;\n  const projection = geoNaturalEarth1().center([10.537, 52.210]).scale(160000).translate([svgWidth / 2, svgHeight / 2]);\n  const hexbinGenerator = hexbin().extent([[0, 0], [svgWidth, svgHeight]]).radius(15); // Adjust the radius based on desired hex size\n\n  // Project data with HRV\n  const projectedData = data.map(d => {\n    const coords = projection(d.coords);\n    return {\n      ...d,\n      x: coords[0],\n      y: coords[1],\n      HRV: d.HRV\n    }; // Include HRV here\n  });\n\n  // Generate hex bins using projected coordinates\n  const bins = hexbinGenerator(projectedData.map(d => [d.x, d.y]));\n\n  // Prepare a color scale to pass to the legend\n  const hrvValues = projectedData.map(d => d.HRV).filter(h => h != null);\n  const colorScale = d3.scaleLinear().domain([d3.min(hrvValues), d3.mean(hrvValues), d3.max(hrvValues)]).range(['blue', 'lightblue', 'darkblue']); // Define your color range\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: svgWidth,\n      height: svgHeight,\n      children: [/*#__PURE__*/_jsxDEV(Marks, {\n        bins: bins,\n        data: projectedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Markscity, {\n        data: projectedData,\n        projection: projection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(ColorLegend, {\n        colorScale: colorScale\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_c = BubbleMap;\nvar _c;\n$RefreshReg$(_c, \"BubbleMap\");","map":{"version":3,"names":["React","hexbin","geoNaturalEarth1","Marks","Markscity","ColorLegend","jsxDEV","_jsxDEV","Fragment","_Fragment","BubbleMap","data","worldAtlas","svgWidth","svgHeight","projection","center","scale","translate","hexbinGenerator","extent","radius","projectedData","map","d","coords","x","y","HRV","bins","hrvValues","filter","h","colorScale","d3","scaleLinear","domain","min","mean","max","range","children","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js"],"sourcesContent":["import React from 'react';\nimport { hexbin } from 'd3-hexbin';\nimport { geoNaturalEarth1 } from 'd3';\nimport { Marks } from './Marks';\nimport { Markscity } from './Markscity';\nimport ColorLegend from './ColorLegend'; // Import the legend\n\nexport const BubbleMap = ({ data, worldAtlas }) => {\n    const svgWidth = 900;\n    const svgHeight = 750;\n\n    const projection = geoNaturalEarth1()\n        .center([10.537, 52.210])\n        .scale(160000)\n        .translate([svgWidth / 2, svgHeight / 2]);\n\n    const hexbinGenerator = hexbin()\n        .extent([[0, 0], [svgWidth, svgHeight]])\n        .radius(15); // Adjust the radius based on desired hex size\n\n    // Project data with HRV\n    const projectedData = data.map(d => {\n        const coords = projection(d.coords);\n        return { ...d, x: coords[0], y: coords[1], HRV: d.HRV }; // Include HRV here\n    });\n\n    // Generate hex bins using projected coordinates\n    const bins = hexbinGenerator(projectedData.map(d => [d.x, d.y]));\n\n    // Prepare a color scale to pass to the legend\n    const hrvValues = projectedData.map(d => d.HRV).filter(h => h != null);\n    const colorScale = d3.scaleLinear()\n        .domain([d3.min(hrvValues), d3.mean(hrvValues), d3.max(hrvValues)])\n        .range(['blue', 'lightblue', 'darkblue']); // Define your color range\n\n    return (\n        <>\n            <svg width={svgWidth} height={svgHeight}>\n                <Marks bins={bins} data={projectedData} /> {/* Pass bins and the original data */}\n                <Markscity data={projectedData} projection={projection} /> {/* Add Markscity layer */}\n                <ColorLegend colorScale={colorScale} /> {/* Include the color legend */}\n            </svg>\n        </>\n    );\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,gBAAgB,QAAQ,IAAI;AACrC,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,SAAS,QAAQ,aAAa;AACvC,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzC,OAAO,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EAC/C,MAAMC,QAAQ,GAAG,GAAG;EACpB,MAAMC,SAAS,GAAG,GAAG;EAErB,MAAMC,UAAU,GAAGb,gBAAgB,CAAC,CAAC,CAChCc,MAAM,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CACxBC,KAAK,CAAC,MAAM,CAAC,CACbC,SAAS,CAAC,CAACL,QAAQ,GAAG,CAAC,EAAEC,SAAS,GAAG,CAAC,CAAC,CAAC;EAE7C,MAAMK,eAAe,GAAGlB,MAAM,CAAC,CAAC,CAC3BmB,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAACP,QAAQ,EAAEC,SAAS,CAAC,CAAC,CAAC,CACvCO,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEjB;EACA,MAAMC,aAAa,GAAGX,IAAI,CAACY,GAAG,CAACC,CAAC,IAAI;IAChC,MAAMC,MAAM,GAAGV,UAAU,CAACS,CAAC,CAACC,MAAM,CAAC;IACnC,OAAO;MAAE,GAAGD,CAAC;MAAEE,CAAC,EAAED,MAAM,CAAC,CAAC,CAAC;MAAEE,CAAC,EAAEF,MAAM,CAAC,CAAC,CAAC;MAAEG,GAAG,EAAEJ,CAAC,CAACI;IAAI,CAAC,CAAC,CAAC;EAC7D,CAAC,CAAC;;EAEF;EACA,MAAMC,IAAI,GAAGV,eAAe,CAACG,aAAa,CAACC,GAAG,CAACC,CAAC,IAAI,CAACA,CAAC,CAACE,CAAC,EAAEF,CAAC,CAACG,CAAC,CAAC,CAAC,CAAC;;EAEhE;EACA,MAAMG,SAAS,GAAGR,aAAa,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACI,GAAG,CAAC,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,IAAI,IAAI,CAAC;EACtE,MAAMC,UAAU,GAAGC,EAAE,CAACC,WAAW,CAAC,CAAC,CAC9BC,MAAM,CAAC,CAACF,EAAE,CAACG,GAAG,CAACP,SAAS,CAAC,EAAEI,EAAE,CAACI,IAAI,CAACR,SAAS,CAAC,EAAEI,EAAE,CAACK,GAAG,CAACT,SAAS,CAAC,CAAC,CAAC,CAClEU,KAAK,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;;EAE/C,oBACIjC,OAAA,CAAAE,SAAA;IAAAgC,QAAA,eACIlC,OAAA;MAAKmC,KAAK,EAAE7B,QAAS;MAAC8B,MAAM,EAAE7B,SAAU;MAAA2B,QAAA,gBACpClC,OAAA,CAACJ,KAAK;QAAC0B,IAAI,EAAEA,IAAK;QAAClB,IAAI,EAAEW;MAAc;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC,eAC3CxC,OAAA,CAACH,SAAS;QAACO,IAAI,EAAEW,aAAc;QAACP,UAAU,EAAEA;MAAW;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC,eAC3DxC,OAAA,CAACF,WAAW;QAAC4B,UAAU,EAAEA;MAAW;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC;EAAC,gBACR,CAAC;AAEX,CAAC;AAACC,EAAA,GArCWtC,SAAS;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}