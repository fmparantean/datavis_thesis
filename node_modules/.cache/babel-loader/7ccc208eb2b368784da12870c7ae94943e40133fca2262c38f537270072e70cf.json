{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js\";\nimport React from 'react';\nimport { Marks } from './Marks';\nimport { Markscity } from './Markscity';\nimport { hexbin } from 'd3-hexbin';\nimport { geoNaturalEarth1 } from 'd3';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst sampleData = [{\n  coords: [10.5, 52.2],\n  HRV: 50\n}, {\n  coords: [10.54, 52.21],\n  HRV: 80\n}, {\n  coords: [10.53, 52.20],\n  HRV: 100\n}, {\n  coords: [10.55, 52.16],\n  HRV: 60\n}];\nexport const BubbleMap = ({\n  data,\n  worldAtlas\n}) => {\n  const projection = geoNaturalEarth1().center([10.537004, 52.210297]) // Center over your area for testing\n  .scale(150000) // Set the scale for visibility\n  .translate([450, 375]); // Center your SVG\n\n  const hexbinGenerator = hexbin().size([900, 750]) // SVG size\n  .radius(30); // Hexagon radius\n\n  // Use sample data for testing\n  const projectedData = sampleData.map(d => {\n    const coords = projection(d.coords);\n    console.log(\"Projected Coords (Sample):\", coords, \"HRV:\", d.HRV); // Log projected coords\n    return {\n      ...d,\n      coords\n    };\n  });\n\n  // Generate hex bin data\n  const bins = hexbinGenerator(projectedData);\n  console.log(\"Hex Bin Data:\", bins); // Log hex bins\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Marks, {\n      bins: bins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Markscity, {\n      worldAtlas: worldAtlas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_c = BubbleMap;\nvar _c;\n$RefreshReg$(_c, \"BubbleMap\");","map":{"version":3,"names":["React","Marks","Markscity","hexbin","geoNaturalEarth1","jsxDEV","_jsxDEV","Fragment","_Fragment","sampleData","coords","HRV","BubbleMap","data","worldAtlas","projection","center","scale","translate","hexbinGenerator","size","radius","projectedData","map","d","console","log","bins","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js"],"sourcesContent":["import React from 'react';\nimport { Marks } from './Marks';\nimport { Markscity } from './Markscity';\nimport { hexbin } from 'd3-hexbin';\nimport { geoNaturalEarth1 } from 'd3';\n\nconst sampleData = [\n    { coords: [10.5, 52.2], HRV: 50 },\n    { coords: [10.54, 52.21], HRV: 80 },\n    { coords: [10.53, 52.20], HRV: 100 },\n    { coords: [10.55, 52.16], HRV: 60 },\n];\n\nexport const BubbleMap = ({ data, worldAtlas }) => {\n    const projection = geoNaturalEarth1()\n        .center([10.537004, 52.210297]) // Center over your area for testing\n        .scale(150000) // Set the scale for visibility\n        .translate([450, 375]); // Center your SVG\n\n    const hexbinGenerator = hexbin()\n        .size([900, 750]) // SVG size\n        .radius(30); // Hexagon radius\n\n    // Use sample data for testing\n    const projectedData = sampleData.map(d => {\n        const coords = projection(d.coords);\n        console.log(\"Projected Coords (Sample):\", coords, \"HRV:\", d.HRV); // Log projected coords\n        return { ...d, coords };\n    });\n\n    // Generate hex bin data\n    const bins = hexbinGenerator(projectedData);\n    console.log(\"Hex Bin Data:\", bins); // Log hex bins\n\n    return (\n        <>\n            <Marks bins={bins} />\n            <Markscity worldAtlas={worldAtlas} />\n        </>\n    );\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,gBAAgB,QAAQ,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtC,MAAMC,UAAU,GAAG,CACf;EAAEC,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAEC,GAAG,EAAE;AAAG,CAAC,EACjC;EAAED,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;EAAEC,GAAG,EAAE;AAAG,CAAC,EACnC;EAAED,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;EAAEC,GAAG,EAAE;AAAI,CAAC,EACpC;EAAED,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;EAAEC,GAAG,EAAE;AAAG,CAAC,CACtC;AAED,OAAO,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EAC/C,MAAMC,UAAU,GAAGX,gBAAgB,CAAC,CAAC,CAChCY,MAAM,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;EAAA,CAC/BC,KAAK,CAAC,MAAM,CAAC,CAAC;EAAA,CACdC,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;;EAE5B,MAAMC,eAAe,GAAGhB,MAAM,CAAC,CAAC,CAC3BiB,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EAAA,CACjBC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEjB;EACA,MAAMC,aAAa,GAAGb,UAAU,CAACc,GAAG,CAACC,CAAC,IAAI;IACtC,MAAMd,MAAM,GAAGK,UAAU,CAACS,CAAC,CAACd,MAAM,CAAC;IACnCe,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEhB,MAAM,EAAE,MAAM,EAAEc,CAAC,CAACb,GAAG,CAAC,CAAC,CAAC;IAClE,OAAO;MAAE,GAAGa,CAAC;MAAEd;IAAO,CAAC;EAC3B,CAAC,CAAC;;EAEF;EACA,MAAMiB,IAAI,GAAGR,eAAe,CAACG,aAAa,CAAC;EAC3CG,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,IAAI,CAAC,CAAC,CAAC;;EAEpC,oBACIrB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBACItB,OAAA,CAACL,KAAK;MAAC0B,IAAI,EAAEA;IAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrB1B,OAAA,CAACJ,SAAS;MAACY,UAAU,EAAEA;IAAW;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACvC,CAAC;AAEX,CAAC;AAACC,EAAA,GA3BWrB,SAAS;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}