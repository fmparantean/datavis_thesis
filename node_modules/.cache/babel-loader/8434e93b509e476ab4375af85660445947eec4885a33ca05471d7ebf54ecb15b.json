{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useMap } from 'react-leaflet'; // Access the Leaflet map context\nimport L from 'leaflet'; // Leaflet for mapping functionalities\nimport { hexbin } from 'd3-hexbin'; // Import D3's hexbin functionality\nimport * as d3 from 'd3'; // Import D3 for utility functions\n\nexport const BubbleMap = ({\n  data\n}) => {\n  _s();\n  const map = useMap(); // Use the Leaflet map instance\n\n  useEffect(() => {\n    // Create hexbin generator\n    const hexbinGenerator = hexbin().radius(20) // Adjust the radius to your preference\n    .x(d => d[0]) // Longitude accessor\n    .y(d => d[1]); // Latitude accessor\n\n    // Prepare points array from the coordinates\n    const points = data.map(feat => feat.coords); // Expect coordinates to be [lng, lat]\n\n    // Generate hexagon bins from points\n    const bins = hexbinGenerator(points);\n\n    // Create layer group for the hexbins\n    const hexbinLayer = L.layerGroup().addTo(map);\n\n    // Create hexagons for each bin\n    bins.forEach(bin => {\n      // Generate hexagon vertices\n      const hexCoords = generateHexagon(bin.x, bin.y, 20); // Use bin center\n\n      // Create and add hexagon to the map\n      L.polygon(hexCoords, {\n        color: 'blue',\n        // Set a static color for visibility\n        fillColor: 'lightblue',\n        // Fill color for the hexagon\n        fillOpacity: 0.6,\n        weight: 1\n      }).addTo(hexbinLayer); // Add hexagon to hexbin layer\n    });\n    return () => {\n      // Cleanup: Remove hexbin layer on component unmount\n      if (map.hasLayer(hexbinLayer)) {\n        map.removeLayer(hexbinLayer);\n      }\n    };\n  }, [data, map]); // Dependencies for the useEffect hook\n\n  return null; // No rendering directly from this component\n};\n\n// Function to generate hexagon vertices given center coordinates and radius\n_s(BubbleMap, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = BubbleMap;\nconst generateHexagon = (lat, lng, radius) => {\n  const angle = Math.PI / 3; // 60 degrees\n  const points = [];\n  for (let i = 0; i < 6; i++) {\n    points.push([lat + radius * Math.sin(angle * i),\n    // Latitude adjustment\n    lng + radius * Math.cos(angle * i) // Longitude adjustment\n    ]);\n  }\n  return points; // Return vertices of the hexagon\n};\nvar _c;\n$RefreshReg$(_c, \"BubbleMap\");","map":{"version":3,"names":["React","useEffect","useMap","L","hexbin","d3","BubbleMap","data","_s","map","hexbinGenerator","radius","x","d","y","points","feat","coords","bins","hexbinLayer","layerGroup","addTo","forEach","bin","hexCoords","generateHexagon","polygon","color","fillColor","fillOpacity","weight","hasLayer","removeLayer","_c","lat","lng","angle","Math","PI","i","push","sin","cos","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useMap } from 'react-leaflet'; // Access the Leaflet map context\nimport L from 'leaflet'; // Leaflet for mapping functionalities\nimport { hexbin } from 'd3-hexbin'; // Import D3's hexbin functionality\nimport * as d3 from 'd3'; // Import D3 for utility functions\n\nexport const BubbleMap = ({ data }) => {\n    const map = useMap(); // Use the Leaflet map instance\n\n    useEffect(() => {\n        // Create hexbin generator\n        const hexbinGenerator = hexbin()\n            .radius(20) // Adjust the radius to your preference\n            .x(d => d[0]) // Longitude accessor\n            .y(d => d[1]); // Latitude accessor\n\n        // Prepare points array from the coordinates\n        const points = data.map(feat => feat.coords); // Expect coordinates to be [lng, lat]\n\n        // Generate hexagon bins from points\n        const bins = hexbinGenerator(points); \n\n        // Create layer group for the hexbins\n        const hexbinLayer = L.layerGroup().addTo(map); \n\n        // Create hexagons for each bin\n        bins.forEach(bin => {\n            // Generate hexagon vertices\n            const hexCoords = generateHexagon(bin.x, bin.y, 20); // Use bin center\n\n            // Create and add hexagon to the map\n            L.polygon(hexCoords, {\n                color: 'blue', // Set a static color for visibility\n                fillColor: 'lightblue', // Fill color for the hexagon\n                fillOpacity: 0.6,\n                weight: 1,\n            }).addTo(hexbinLayer); // Add hexagon to hexbin layer\n        });\n\n        return () => {\n            // Cleanup: Remove hexbin layer on component unmount\n            if (map.hasLayer(hexbinLayer)) {\n                map.removeLayer(hexbinLayer);\n            }\n        };\n    }, [data, map]); // Dependencies for the useEffect hook\n\n    return null; // No rendering directly from this component\n};\n\n// Function to generate hexagon vertices given center coordinates and radius\nconst generateHexagon = (lat, lng, radius) => {\n    const angle = (Math.PI / 3); // 60 degrees\n    const points = [];\n    for (let i = 0; i < 6; i++) {\n        points.push([\n            lat + (radius * Math.sin(angle * i)), // Latitude adjustment\n            lng + (radius * Math.cos(angle * i))  // Longitude adjustment\n        ]);\n    }\n    return points; // Return vertices of the hexagon\n};"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,MAAM,QAAQ,eAAe,CAAC,CAAC;AACxC,OAAOC,CAAC,MAAM,SAAS,CAAC,CAAC;AACzB,SAASC,MAAM,QAAQ,WAAW,CAAC,CAAC;AACpC,OAAO,KAAKC,EAAE,MAAM,IAAI,CAAC,CAAC;;AAE1B,OAAO,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAMC,GAAG,GAAGP,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEtBD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMS,eAAe,GAAGN,MAAM,CAAC,CAAC,CAC3BO,MAAM,CAAC,EAAE,CAAC,CAAC;IAAA,CACXC,CAAC,CAACC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAAA,CACbC,CAAC,CAACD,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEnB;IACA,MAAME,MAAM,GAAGR,IAAI,CAACE,GAAG,CAACO,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;;IAE9C;IACA,MAAMC,IAAI,GAAGR,eAAe,CAACK,MAAM,CAAC;;IAEpC;IACA,MAAMI,WAAW,GAAGhB,CAAC,CAACiB,UAAU,CAAC,CAAC,CAACC,KAAK,CAACZ,GAAG,CAAC;;IAE7C;IACAS,IAAI,CAACI,OAAO,CAACC,GAAG,IAAI;MAChB;MACA,MAAMC,SAAS,GAAGC,eAAe,CAACF,GAAG,CAACX,CAAC,EAAEW,GAAG,CAACT,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;MAErD;MACAX,CAAC,CAACuB,OAAO,CAACF,SAAS,EAAE;QACjBG,KAAK,EAAE,MAAM;QAAE;QACfC,SAAS,EAAE,WAAW;QAAE;QACxBC,WAAW,EAAE,GAAG;QAChBC,MAAM,EAAE;MACZ,CAAC,CAAC,CAACT,KAAK,CAACF,WAAW,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO,MAAM;MACT;MACA,IAAIV,GAAG,CAACsB,QAAQ,CAACZ,WAAW,CAAC,EAAE;QAC3BV,GAAG,CAACuB,WAAW,CAACb,WAAW,CAAC;MAChC;IACJ,CAAC;EACL,CAAC,EAAE,CAACZ,IAAI,EAAEE,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEjB,OAAO,IAAI,CAAC,CAAC;AACjB,CAAC;;AAED;AAAAD,EAAA,CA5CaF,SAAS;EAAA,QACNJ,MAAM;AAAA;AAAA+B,EAAA,GADT3B,SAAS;AA6CtB,MAAMmB,eAAe,GAAGA,CAACS,GAAG,EAAEC,GAAG,EAAExB,MAAM,KAAK;EAC1C,MAAMyB,KAAK,GAAIC,IAAI,CAACC,EAAE,GAAG,CAAE,CAAC,CAAC;EAC7B,MAAMvB,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxBxB,MAAM,CAACyB,IAAI,CAAC,CACRN,GAAG,GAAIvB,MAAM,GAAG0B,IAAI,CAACI,GAAG,CAACL,KAAK,GAAGG,CAAC,CAAE;IAAE;IACtCJ,GAAG,GAAIxB,MAAM,GAAG0B,IAAI,CAACK,GAAG,CAACN,KAAK,GAAGG,CAAC,CAAE,CAAE;IAAA,CACzC,CAAC;EACN;EACA,OAAOxB,MAAM,CAAC,CAAC;AACnB,CAAC;AAAC,IAAAkB,EAAA;AAAAU,YAAA,CAAAV,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}