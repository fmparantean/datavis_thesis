{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/Marks.js\";\nimport { hexbin as d3Hexbin } from 'd3-hexbin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst hexbin = d3Hexbin(); // Instantiate hexbin\n\nexport const Marks = ({\n  bins,\n  sizeValue\n}) => /*#__PURE__*/_jsxDEV(\"g\", {\n  className: \"marks\",\n  children: bins.map((bin, i) => {\n    const centroid = hexbin.centroid(bin); // Get the centroid for each bin\n\n    // Aggregate the HRV for the current bin\n    const totalHRV = bin.reduce((acc, d) => acc + sizeValue(d), 0);\n    const avgHRV = totalHRV / bin.length; // Average HRV for color scaling\n\n    // Use a scale to determine color based on average HRV\n    const fillColor = avgHRV > 50 ? 'orange' : 'lightblue'; // Adjust this logic as needed\n\n    return /*#__PURE__*/_jsxDEV(\"path\", {\n      d: hexbin.hexagon(200) // Create the hexagon shape\n      ,\n      transform: `translate(${centroid[0]}, ${centroid[1]})` // Position the hexagon\n      ,\n      fill: fillColor // Use the calculated color for HRV\n      ,\n      stroke: \"black\",\n      strokeWidth: 1\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this);\n  })\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 5\n}, this);\n_c = Marks;\nvar _c;\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"names":["hexbin","d3Hexbin","jsxDEV","_jsxDEV","Marks","bins","sizeValue","className","children","map","bin","i","centroid","totalHRV","reduce","acc","d","avgHRV","length","fillColor","hexagon","transform","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/Marks.js"],"sourcesContent":["import { hexbin as d3Hexbin } from 'd3-hexbin';\n\nconst hexbin = d3Hexbin(); // Instantiate hexbin\n\nexport const Marks = ({ bins, sizeValue }) => (\n    <g className=\"marks\">\n        {bins.map((bin, i) => {\n            const centroid = hexbin.centroid(bin); // Get the centroid for each bin\n\n            // Aggregate the HRV for the current bin\n            const totalHRV = bin.reduce((acc, d) => acc + sizeValue(d), 0);\n            const avgHRV = totalHRV / bin.length; // Average HRV for color scaling\n\n            // Use a scale to determine color based on average HRV\n            const fillColor = avgHRV > 50 ? 'orange' : 'lightblue'; // Adjust this logic as needed\n\n            return (\n                <path\n                    key={i}\n                    d={hexbin.hexagon(200)} // Create the hexagon shape\n                    transform={`translate(${centroid[0]}, ${centroid[1]})`} // Position the hexagon\n                    fill={fillColor} // Use the calculated color for HRV\n                    stroke=\"black\"\n                    strokeWidth={1}\n                />\n            );\n        })}\n    </g>\n);"],"mappings":";AAAA,SAASA,MAAM,IAAIC,QAAQ,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMH,MAAM,GAAGC,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAE3B,OAAO,MAAMG,KAAK,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAU,CAAC,kBACrCH,OAAA;EAAGI,SAAS,EAAC,OAAO;EAAAC,QAAA,EACfH,IAAI,CAACI,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;IAClB,MAAMC,QAAQ,GAAGZ,MAAM,CAACY,QAAQ,CAACF,GAAG,CAAC,CAAC,CAAC;;IAEvC;IACA,MAAMG,QAAQ,GAAGH,GAAG,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGT,SAAS,CAACU,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9D,MAAMC,MAAM,GAAGJ,QAAQ,GAAGH,GAAG,CAACQ,MAAM,CAAC,CAAC;;IAEtC;IACA,MAAMC,SAAS,GAAGF,MAAM,GAAG,EAAE,GAAG,QAAQ,GAAG,WAAW,CAAC,CAAC;;IAExD,oBACId,OAAA;MAEIa,CAAC,EAAEhB,MAAM,CAACoB,OAAO,CAAC,GAAG,CAAE,CAAC;MAAA;MACxBC,SAAS,EAAE,aAAaT,QAAQ,CAAC,CAAC,CAAC,KAAKA,QAAQ,CAAC,CAAC,CAAC,GAAI,CAAC;MAAA;MACxDU,IAAI,EAAEH,SAAU,CAAC;MAAA;MACjBI,MAAM,EAAC,OAAO;MACdC,WAAW,EAAE;IAAE,GALVb,CAAC;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMT,CAAC;EAEV,CAAC;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACH,CACN;AAACC,EAAA,GAxBWzB,KAAK;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}