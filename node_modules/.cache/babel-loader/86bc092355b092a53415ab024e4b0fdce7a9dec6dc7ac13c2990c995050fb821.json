{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js\";\nimport React from 'react';\nimport { Marks } from './Marks';\nimport { Markscity } from './Markscity';\nimport { hexbin } from 'd3-hexbin';\nimport { geoNaturalEarth1 } from 'd3';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const BubbleMap = ({\n  data,\n  worldAtlas\n}) => {\n  const projection = geoNaturalEarth1().center([10.537004, 52.210297]).scale(160000).translate([450, 300]);\n  const hexbinGenerator = hexbin().size([900, 750]) // Match your SVG size\n  .radius(30); // Adjust radius for visibility\n\n  // Test coordinates\n  const testPoints = [{\n    coords: [10.537004, 52.210297],\n    HRV: 50\n  },\n  // Example coordinate\n  {\n    coords: [10.54, 52.21],\n    HRV: 80\n  },\n  // Another test point\n  {\n    coords: [10.53, 52.20],\n    HRV: 100\n  } // Additional test point\n  ];\n  const projectedTestData = testPoints.map(d => {\n    const coords = projection(d.coords);\n    console.log(\"Projected Coords (Test):\", coords, \"HRV:\", d.HRV);\n    return {\n      ...d,\n      coords\n    };\n  });\n\n  // Generate hex bins from test data\n  const testBins = hexbinGenerator(projectedTestData);\n  console.log(\"Test Hex Bin Data:\", testBins);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Marks, {\n      bins: testBins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Markscity, {\n      worldAtlas: worldAtlas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_c = BubbleMap;\nvar _c;\n$RefreshReg$(_c, \"BubbleMap\");","map":{"version":3,"names":["React","Marks","Markscity","hexbin","geoNaturalEarth1","jsxDEV","_jsxDEV","Fragment","_Fragment","BubbleMap","data","worldAtlas","projection","center","scale","translate","hexbinGenerator","size","radius","testPoints","coords","HRV","projectedTestData","map","d","console","log","testBins","children","bins","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js"],"sourcesContent":["import React from 'react';\nimport { Marks } from './Marks';\nimport { Markscity } from './Markscity';\nimport { hexbin } from 'd3-hexbin';\nimport { geoNaturalEarth1 } from 'd3';\n\nexport const BubbleMap = ({ data, worldAtlas }) => {\n    const projection = geoNaturalEarth1()\n        .center([10.537004, 52.210297])\n        .scale(160000)\n        .translate([450, 300]);\n\n    const hexbinGenerator = hexbin()\n        .size([900, 750]) // Match your SVG size\n        .radius(30); // Adjust radius for visibility\n\n    // Test coordinates\n    const testPoints = [\n        { coords: [10.537004, 52.210297], HRV: 50 }, // Example coordinate\n        { coords: [10.54, 52.21], HRV: 80 }, // Another test point\n        { coords: [10.53, 52.20], HRV: 100 }, // Additional test point\n    ];\n\n    const projectedTestData = testPoints.map(d => {\n        const coords = projection(d.coords);\n        console.log(\"Projected Coords (Test):\", coords, \"HRV:\", d.HRV);\n        return { ...d, coords };\n    });\n\n    // Generate hex bins from test data\n    const testBins = hexbinGenerator(projectedTestData);\n    console.log(\"Test Hex Bin Data:\", testBins);\n\n    return (\n        <>\n            <Marks bins={testBins} />\n            <Markscity worldAtlas={worldAtlas} />\n        </>\n    );\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,gBAAgB,QAAQ,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtC,OAAO,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EAC/C,MAAMC,UAAU,GAAGR,gBAAgB,CAAC,CAAC,CAChCS,MAAM,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAC9BC,KAAK,CAAC,MAAM,CAAC,CACbC,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;EAE1B,MAAMC,eAAe,GAAGb,MAAM,CAAC,CAAC,CAC3Bc,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EAAA,CACjBC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEjB;EACA,MAAMC,UAAU,GAAG,CACf;IAAEC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;IAAEC,GAAG,EAAE;EAAG,CAAC;EAAE;EAC7C;IAAED,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;IAAEC,GAAG,EAAE;EAAG,CAAC;EAAE;EACrC;IAAED,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;IAAEC,GAAG,EAAE;EAAI,CAAC,CAAE;EAAA,CACzC;EAED,MAAMC,iBAAiB,GAAGH,UAAU,CAACI,GAAG,CAACC,CAAC,IAAI;IAC1C,MAAMJ,MAAM,GAAGR,UAAU,CAACY,CAAC,CAACJ,MAAM,CAAC;IACnCK,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEN,MAAM,EAAE,MAAM,EAAEI,CAAC,CAACH,GAAG,CAAC;IAC9D,OAAO;MAAE,GAAGG,CAAC;MAAEJ;IAAO,CAAC;EAC3B,CAAC,CAAC;;EAEF;EACA,MAAMO,QAAQ,GAAGX,eAAe,CAACM,iBAAiB,CAAC;EACnDG,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,QAAQ,CAAC;EAE3C,oBACIrB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBACItB,OAAA,CAACL,KAAK;MAAC4B,IAAI,EAAEF;IAAS;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzB3B,OAAA,CAACJ,SAAS;MAACS,UAAU,EAAEA;IAAW;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACvC,CAAC;AAEX,CAAC;AAACC,EAAA,GAjCWzB,SAAS;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}