{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport { useMap } from 'react-leaflet'; // Use the Leaflet map\nimport L from 'leaflet'; // Import Leaflet for map functionalities\nimport { hexbin } from 'd3-hexbin'; // Import hexbin from D3\nimport * as d3 from 'd3'; // Import D3 for scaling and utilities\n\nexport const BubbleMap = ({\n  data\n}) => {\n  _s();\n  const map = useMap(); // Grab the Leaflet map instance\n\n  // Create a color scale for HRV values\n  const colorScale = d3.scaleLinear().domain([d3.min(data, d => d.HRV), d3.mean(data, d => d.HRV), d3.max(data, d => d.HRV)]).range(['lightblue', 'blue', 'darkblue']); // Set color scale range\n\n  // Create hexbin generator\n  const hexbinGenerator = hexbin().radius(20) // Adjust this radius depending on the desired size\n  .x(d => d[0]) // Define x accessor for longitude\n  .y(d => d[1]); // Define y accessor for latitude\n\n  // Process the coordinates for hexbin\n  const points = data.map(feat => feat.coords); // coords format should already be [longitude, latitude]\n\n  // Generate hexagon bins from points\n  const bins = hexbinGenerator(points);\n\n  // Create Leaflet layer group for hexagons\n  const hexbinLayer = L.layerGroup().addTo(map);\n\n  // Create hexagons for each bin\n  bins.forEach(bin => {\n    const avgHRV = d3.mean(bin.map(d => data.find(feature => feature.coords[0] === d[0] && feature.coords[1] === d[1]).HRV));\n\n    // Create hexagon vertices\n    const hexCoords = generateHexagon(bin.x, bin.y, 20); // Adjust radius if needed\n\n    // Create and add the hexagon to the layer\n    L.polygon(hexCoords, {\n      color: colorScale(avgHRV),\n      // Set color based on average HRV\n      fillColor: colorScale(avgHRV),\n      // Fill color\n      fillOpacity: 0.6,\n      weight: 1\n    }).addTo(hexbinLayer); // Add to hexbin layer\n  });\n  return null; // No direct rendering\n};\n\n// Function to generate hexagon vertices based on center coordinates and radius\n_s(BubbleMap, \"cX187cvZ2hODbkaiLn05gMk1sCM=\", false, function () {\n  return [useMap];\n});\n_c = BubbleMap;\nconst generateHexagon = (lat, lng, radius) => {\n  const angle = Math.PI / 3; // 60 degrees for hexagon\n  const points = [];\n  for (let i = 0; i < 6; i++) {\n    points.push([lat + radius * Math.sin(angle * i),\n    // Latitude adjustment\n    lng + radius * Math.cos(angle * i) // Longitude adjustment\n    ]);\n  }\n  return points; // Returns hexagon vertices\n};\nvar _c;\n$RefreshReg$(_c, \"BubbleMap\");","map":{"version":3,"names":["React","useMap","L","hexbin","d3","BubbleMap","data","_s","map","colorScale","scaleLinear","domain","min","d","HRV","mean","max","range","hexbinGenerator","radius","x","y","points","feat","coords","bins","hexbinLayer","layerGroup","addTo","forEach","bin","avgHRV","find","feature","hexCoords","generateHexagon","polygon","color","fillColor","fillOpacity","weight","_c","lat","lng","angle","Math","PI","i","push","sin","cos","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js"],"sourcesContent":["import React from 'react';\nimport { useMap } from 'react-leaflet'; // Use the Leaflet map\nimport L from 'leaflet'; // Import Leaflet for map functionalities\nimport { hexbin } from 'd3-hexbin'; // Import hexbin from D3\nimport * as d3 from 'd3'; // Import D3 for scaling and utilities\n\nexport const BubbleMap = ({ data }) => {\n    const map = useMap(); // Grab the Leaflet map instance\n\n    // Create a color scale for HRV values\n    const colorScale = d3.scaleLinear()\n        .domain([d3.min(data, d => d.HRV), d3.mean(data, d => d.HRV), d3.max(data, d => d.HRV)]) \n        .range(['lightblue', 'blue', 'darkblue']); // Set color scale range\n\n    // Create hexbin generator\n    const hexbinGenerator = hexbin()\n        .radius(20) // Adjust this radius depending on the desired size\n        .x(d => d[0]) // Define x accessor for longitude\n        .y(d => d[1]); // Define y accessor for latitude\n\n    // Process the coordinates for hexbin\n    const points = data.map(feat => feat.coords); // coords format should already be [longitude, latitude]\n\n    // Generate hexagon bins from points\n    const bins = hexbinGenerator(points); \n\n    // Create Leaflet layer group for hexagons\n    const hexbinLayer = L.layerGroup().addTo(map); \n\n    // Create hexagons for each bin\n    bins.forEach(bin => {\n        const avgHRV = d3.mean(bin.map(d => \n            data.find(feature => \n                feature.coords[0] === d[0] && feature.coords[1] === d[1]).HRV\n        ));\n\n        // Create hexagon vertices\n        const hexCoords = generateHexagon(bin.x, bin.y, 20); // Adjust radius if needed\n\n        // Create and add the hexagon to the layer\n        L.polygon(hexCoords, {\n            color: colorScale(avgHRV), // Set color based on average HRV\n            fillColor: colorScale(avgHRV), // Fill color\n            fillOpacity: 0.6,\n            weight: 1,\n        }).addTo(hexbinLayer); // Add to hexbin layer\n    });\n\n    return null; // No direct rendering\n};\n\n// Function to generate hexagon vertices based on center coordinates and radius\nconst generateHexagon = (lat, lng, radius) => {\n    const angle = (Math.PI / 3); // 60 degrees for hexagon\n    const points = [];\n    for (let i = 0; i < 6; i++) {\n        points.push([\n            lat + (radius * Math.sin(angle * i)), // Latitude adjustment\n            lng + (radius * Math.cos(angle * i))  // Longitude adjustment\n        ]);\n    }\n    return points; // Returns hexagon vertices\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}