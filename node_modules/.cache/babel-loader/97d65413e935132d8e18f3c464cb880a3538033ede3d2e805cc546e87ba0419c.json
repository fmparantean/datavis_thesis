{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Documents/dataviz_project/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport './App.css';\nimport { useData } from './useData';\nimport { Hexbinmap } from './HexbinMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\nimport { scaleLinear } from 'd3';\nimport ColorLegend from './HexbinMap/ColorLegend.js';\nimport * as d3 from 'd3';\nimport Filters from './Filters';\n\n// Removed fixed width and height constants for responsiveness\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reservedHeightFactor = 0.8; // Reserved height for the main graph\nconst dateHistogramSize = 0.24;\nconst orderedDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nconst App = () => {\n  _s();\n  const worldAtlas = useWorldAtlas();\n  const data = useData();\n  const [brushExtent, setBrushExtent] = useState(null);\n  const [participant, setParticipant] = useState(\"All\");\n  const [gender, setGender] = useState(\"Both\");\n  const [modeButton, setModeButton] = useState(\"Both\");\n  const [yValueField, setYValueField] = useState(\"HRV\"); // Initialize with HRV\n\n  // State for window size\n  const [windowDimensions, setWindowDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  const width = windowDimensions.width * 0.65; // 65% of the container width\n  const height = windowDimensions.height * reservedHeightFactor; // 80% of the window height\n\n  if (!worldAtlas || !data || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: /*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: height / 2,\n        textAnchor: \"middle\",\n        fontSize: \"14\",\n        fill: \"black\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this);\n  }\n\n  // Get unique participants dynamically and sort them\n  const uniqueParticipants = Array.from(new Set(data.map(d => d.Participant))).sort((a, b) => a - b); // Sort values from smallest to largest\n\n  // Filter Data based on selected criteria\n  const filteredData = data.filter(d => {\n    const participantFilter = participant === \"All\" || d.Participant.toString() === participant;\n    const genderFilter = gender === \"Both\" || d.Gender === gender;\n    const modeButtonFilter = modeButton === \"Both\" || d.ModeButton_xs === modeButton;\n    return participantFilter && genderFilter && modeButtonFilter;\n  });\n  const hrvValues = filteredData.map(d => d[yValueField]).filter(h => h != null);\n  const colorScale = scaleLinear().domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0]).range(['yellow', 'orange', 'red']);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [/*#__PURE__*/_jsxDEV(Filters, {\n        participant: participant,\n        setParticipant: setParticipant,\n        gender: gender,\n        setGender: setGender,\n        modeButton: modeButton,\n        setModeButton: setModeButton,\n        yValueField: yValueField,\n        setYValueField: setYValueField,\n        uniqueParticipants: uniqueParticipants\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"bus.png\",\n        alt: \"bus Logo\",\n        style: {\n          width: '100px',\n          height: 'auto',\n          marginTop: '20px',\n          alignSelf: 'center'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: [/*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: 45,\n        textAnchor: \"middle\",\n        className: \"title\",\n        children: \"Travel Experience with Different Transportation Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"image\", {\n        id: \"map-image\",\n        href: \"datamap.png\",\n        x: 21,\n        y: 72,\n        height: \"auto\",\n        width: width\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(0,30)`,\n        children: /*#__PURE__*/_jsxDEV(Hexbinmap, {\n          data: brushExtent ? filteredData.filter(d => brushExtent.includes(orderedDays[d.DayOrder])) : [],\n          worldAtlas: worldAtlas,\n          yValueField: yValueField // Pass yValueField dynamically\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(0, ${height - dateHistogramSize * height})`,\n        children: /*#__PURE__*/_jsxDEV(DateHistogram, {\n          data: filteredData,\n          width: width,\n          height: dateHistogramSize * height,\n          setBrushExtent: setBrushExtent,\n          xValue: d => d.DayOrder,\n          yValueField: yValueField // Pass the selected Y-value field\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(${width - 150}, ${height - 100})`,\n        children: /*#__PURE__*/_jsxDEV(ColorLegend, {\n          colorScale: colorScale,\n          yValueField: yValueField,\n          data: filteredData // Pass the filtered data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"qhwbejIux2dCW9noo7tkOsQ+ZiM=\", false, function () {\n  return [useWorldAtlas, useData];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useWorldAtlas","useData","Hexbinmap","DateHistogram","scaleLinear","ColorLegend","d3","Filters","jsxDEV","_jsxDEV","reservedHeightFactor","dateHistogramSize","orderedDays","App","_s","worldAtlas","data","brushExtent","setBrushExtent","participant","setParticipant","gender","setGender","modeButton","setModeButton","yValueField","setYValueField","windowDimensions","setWindowDimensions","width","window","innerWidth","height","innerHeight","handleResize","addEventListener","removeEventListener","length","children","x","y","textAnchor","fontSize","fill","fileName","_jsxFileName","lineNumber","columnNumber","uniqueParticipants","Array","from","Set","map","d","Participant","sort","a","b","filteredData","filter","participantFilter","toString","genderFilter","Gender","modeButtonFilter","ModeButton_xs","hrvValues","h","colorScale","domain","min","mean","max","range","style","display","flexDirection","alignItems","className","src","alt","marginTop","alignSelf","id","href","transform","includes","DayOrder","xValue","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Documents/dataviz_project/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport './App.css';\nimport { useData } from './useData';\nimport { Hexbinmap } from './HexbinMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\nimport { scaleLinear } from 'd3';\nimport ColorLegend from './HexbinMap/ColorLegend.js'; \nimport * as d3 from 'd3';\nimport Filters from './Filters'; \n\n// Removed fixed width and height constants for responsiveness\nconst reservedHeightFactor = 0.8; // Reserved height for the main graph\nconst dateHistogramSize = 0.24;\nconst orderedDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]; \n\nconst App = () => {\n    const worldAtlas = useWorldAtlas();\n    const data = useData(); \n\n    const [brushExtent, setBrushExtent] = useState(null);\n    const [participant, setParticipant] = useState(\"All\");\n    const [gender, setGender] = useState(\"Both\");\n    const [modeButton, setModeButton] = useState(\"Both\");\n    const [yValueField, setYValueField] = useState(\"HRV\");  // Initialize with HRV\n\n    // State for window size\n    const [windowDimensions, setWindowDimensions] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n    });\n\n    useEffect(() => {\n        const handleResize = () => {\n            setWindowDimensions({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        };\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    const width = windowDimensions.width * 0.65; // 65% of the container width\n    const height = windowDimensions.height * reservedHeightFactor; // 80% of the window height\n\n    if (!worldAtlas || !data || data.length === 0) {\n        return (\n          <svg width={width} height={height}>\n            <text\n              x={width / 2} \n              y={height / 2} \n              textAnchor=\"middle\" \n              fontSize=\"14\" \n              fill=\"black\" \n            >\n              Loading...\n            </text>\n          </svg>\n        ); \n    }\n\n    // Get unique participants dynamically and sort them\n    const uniqueParticipants = Array.from(new Set(data.map(d => d.Participant)))\n        .sort((a, b) => a - b); // Sort values from smallest to largest\n\n    // Filter Data based on selected criteria\n    const filteredData = data.filter(d => {\n        const participantFilter = participant === \"All\" || d.Participant.toString() === participant;\n        const genderFilter = gender === \"Both\" || d.Gender === gender; \n        const modeButtonFilter = modeButton === \"Both\" || d.ModeButton_xs === modeButton;\n        \n        return participantFilter && genderFilter && modeButtonFilter;\n    });\n\n    const hrvValues = filteredData.map(d => d[yValueField]).filter(h => h != null); \n    const colorScale = scaleLinear()\n        .domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0])\n        .range(['yellow', 'orange', 'red']); \n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            <div className=\"filters\">\n                <Filters \n                    participant={participant} \n                    setParticipant={setParticipant} \n                    gender={gender} \n                    setGender={setGender} \n                    modeButton={modeButton} \n                    setModeButton={setModeButton}\n                    yValueField={yValueField}\n                    setYValueField={setYValueField}\n                    uniqueParticipants={uniqueParticipants} \n                />\n                <img \n                    src=\"bus.png\" \n                    alt=\"bus Logo\" \n                    style={{ width: '100px', height: 'auto', marginTop: '20px', alignSelf: 'center' }} \n                />\n            </div>\n            \n            <svg width={width} height={height}>\n                <text\n                    x={width / 2} \n                    y={45} \n                    textAnchor=\"middle\" \n                    className=\"title\" \n                >\n                    Travel Experience with Different Transportation Mode\n                </text>\n\n                <image \n                    id='map-image'\n                    href=\"datamap.png\" \n                    x={21}\n                    y={72} \n                    height=\"auto\" \n                    width={width} \n                />\n                \n                <g transform={`translate(0,30)`}>\n                    <Hexbinmap \n                        data={brushExtent ? filteredData.filter(d => brushExtent.includes(orderedDays[d.DayOrder])) : []}\n                        worldAtlas={worldAtlas} \n                        yValueField={yValueField} // Pass yValueField dynamically\n                    />\n                </g>\n                <g transform={`translate(0, ${height - (dateHistogramSize * height) })`}>\n                    <DateHistogram\n                        data={filteredData} \n                        width={width}\n                        height={dateHistogramSize * height}\n                        setBrushExtent={setBrushExtent}\n                        xValue={d => d.DayOrder} \n                        yValueField={yValueField} // Pass the selected Y-value field\n                    />\n                </g>\n\n                <g transform={`translate(${width - 150}, ${height - 100})`}>\n                    <ColorLegend \n                        colorScale={colorScale} \n                        yValueField={yValueField} \n                        data={filteredData}  // Pass the filtered data\n                    /> \n                </g>\n            </svg>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}