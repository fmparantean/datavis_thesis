{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 5/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport './App.css';\nimport { useData } from './useData';\nimport { Hexbinmap } from './HexbinMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\nimport { scaleLinear } from 'd3';\nimport ColorLegend from './HexbinMap/ColorLegend.js'; // Import ColorLegend\nimport * as d3 from 'd3'; // Import d3 for scales\nimport Filters from './Filters'; // Import the Filters component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 900;\nconst height = 750;\nconst dateHistogramSize = 0.27;\nconst orderedDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nconst App = () => {\n  _s();\n  const worldAtlas = useWorldAtlas();\n  const data = useData(); // Use the JSON data\n\n  const [brushExtent, setBrushExtent] = useState(null);\n  const [participant, setParticipant] = useState(\"All\");\n  const [gender, setGender] = useState(\"Both\");\n  const [modeButton, setModeButton] = useState(\"Both\");\n  const [yValueField, setYValueField] = useState(\"HRV\");\n  if (!worldAtlas || !data || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: /*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: height / 2,\n        textAnchor: \"middle\",\n        fontSize: \"14\",\n        fill: \"black\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this);\n  }\n\n  // Filter Data based on selected criteria\n  const filteredData = data.filter(d => {\n    const participantFilter = participant === \"All\" || d.Participant.toString() === participant;\n    const genderFilter = gender === \"Both\" || d.Gender === gender;\n    const modeButtonFilter = modeButton === \"Both\" || d.ModeButton_xs === modeButton;\n    return participantFilter && genderFilter && modeButtonFilter;\n  });\n  const hrvValues = filteredData.map(d => d[yValueField]).filter(h => h != null);\n  const colorScale = scaleLinear().domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0]).range(['lightblue', 'blue', 'darkblue']); // Set your color range\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Filters, {\n      participant: participant,\n      setParticipant: setParticipant,\n      gender: gender,\n      setGender: setGender,\n      modeButton: modeButton,\n      setModeButton: setModeButton,\n      yValueField: yValueField,\n      setYValueField: setYValueField\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: [/*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: 40,\n        textAnchor: \"middle\",\n        className: \"title\",\n        children: \"THE HRV DISTRIBUTION\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"image\", {\n        href: \"dlr.png\",\n        x: \"800\",\n        y: \"10\",\n        height: \"10px\",\n        width: \"auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(0, 10)`,\n        children: /*#__PURE__*/_jsxDEV(Hexbinmap, {\n          data: filteredData,\n          worldAtlas: worldAtlas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(0, ${height - dateHistogramSize * height})`,\n        children: /*#__PURE__*/_jsxDEV(DateHistogram, {\n          data: filteredData,\n          width: width,\n          height: dateHistogramSize * height,\n          setBrushExtent: setBrushExtent,\n          xValue: d => d.DayOrder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(700, 350)`,\n        children: /*#__PURE__*/_jsxDEV(ColorLegend, {\n          colorScale: colorScale\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"r4lMho1XQ4f694ezHYNK4lfCIGE=\", false, function () {\n  return [useWorldAtlas, useData];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useWorldAtlas","useData","Hexbinmap","DateHistogram","scaleLinear","ColorLegend","d3","Filters","jsxDEV","_jsxDEV","width","height","dateHistogramSize","orderedDays","App","_s","worldAtlas","data","brushExtent","setBrushExtent","participant","setParticipant","gender","setGender","modeButton","setModeButton","yValueField","setYValueField","length","children","x","y","textAnchor","fontSize","fill","fileName","_jsxFileName","lineNumber","columnNumber","filteredData","filter","d","participantFilter","Participant","toString","genderFilter","Gender","modeButtonFilter","ModeButton_xs","hrvValues","map","h","colorScale","domain","min","mean","max","range","style","display","className","href","transform","xValue","DayOrder","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 5/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport './App.css';\nimport { useData } from './useData';\nimport { Hexbinmap } from './HexbinMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\nimport { scaleLinear } from 'd3';\nimport ColorLegend from './HexbinMap/ColorLegend.js'; // Import ColorLegend\nimport * as d3 from 'd3'; // Import d3 for scales\nimport Filters from './Filters'; // Import the Filters component\n\nconst width = 900;\nconst height = 750;\nconst dateHistogramSize = 0.27;\nconst orderedDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\nconst App = () => {\n    const worldAtlas = useWorldAtlas();\n    const data = useData(); // Use the JSON data\n\n    const [brushExtent, setBrushExtent] = useState(null);\n    const [participant, setParticipant] = useState(\"All\");\n    const [gender, setGender] = useState(\"Both\");\n    const [modeButton, setModeButton] = useState(\"Both\");\n    const [yValueField, setYValueField] = useState(\"HRV\");\n\n    if (!worldAtlas || !data || data.length === 0) {\n        return (\n          <svg width={width} height={height}>\n            <text\n              x={width / 2} \n              y={height / 2} \n              textAnchor=\"middle\" \n              fontSize=\"14\" \n              fill=\"black\" \n            >\n              Loading...\n            </text>\n          </svg>\n        ); \n    }\n\n    // Filter Data based on selected criteria\n    const filteredData = data.filter(d => {\n        const participantFilter = participant === \"All\" || d.Participant.toString() === participant;\n        const genderFilter = gender === \"Both\" || d.Gender === gender; \n        const modeButtonFilter = modeButton === \"Both\" || d.ModeButton_xs === modeButton;\n        \n        return participantFilter && genderFilter && modeButtonFilter;\n    });\n\n    const hrvValues = filteredData.map(d => d[yValueField]).filter(h => h != null); \n    const colorScale = scaleLinear()\n        .domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0])\n        .range(['lightblue', 'blue', 'darkblue']); // Set your color range\n\n    return (\n        <div style={{ display: 'flex' }}>\n            <Filters \n                participant={participant} \n                setParticipant={setParticipant} \n                gender={gender} \n                setGender={setGender} \n                modeButton={modeButton}  \n                setModeButton={setModeButton}\n                yValueField={yValueField}\n                setYValueField={setYValueField}\n            />\n            <svg width={width} height={height}>\n                <text\n                    x={width / 2} \n                    y={40} \n                    textAnchor=\"middle\" \n                    className=\"title\" \n                >\n                    THE HRV DISTRIBUTION\n                </text>\n                \n                <image \n                    href=\"dlr.png\" \n                    x=\"800\" \n                    y=\"10\" \n                    height=\"10px\" \n                    width=\"auto\" \n                />\n                \n                <g transform={`translate(0, 10)`}>\n                    <Hexbinmap data={filteredData} worldAtlas={worldAtlas} />\n                </g>\n                <g transform={`translate(0, ${height - dateHistogramSize * height})`}>\n                    <DateHistogram\n                        data={filteredData} \n                        width={width}\n                        height={dateHistogramSize * height}\n                        setBrushExtent={setBrushExtent}\n                        xValue={d => d.DayOrder} \n                    />\n                </g>\n\n                <g transform={`translate(700, 350)`}>\n                    <ColorLegend colorScale={colorScale} /> \n                </g>\n            </svg>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}