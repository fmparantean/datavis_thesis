{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/Marks.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Marks = ({\n  bins,\n  data\n}) => {\n  _s();\n  const [tooltip, setTooltip] = useState({\n    display: 'none'\n  });\n\n  // Prepare the color scale for HRV values\n  const hrvValues = data.map(d => d.HRV); // Collect all HRV values\n  const colorScale = d3.scaleLinear().domain([d3.min(hrvValues), d3.mean(hrvValues), d3.max(hrvValues)]).range(['blue', 'lightblue', 'darkblue']); // Color range based on HRV values\n\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"marks\",\n    children: [bins.map((bin, i) => {\n      // Filter data points that belong to this bin\n      const binData = data.filter(d => d.x >= bin.x - 15 && d.x <= bin.x + 15 &&\n      // Check if point is within the x range\n      d.y >= bin.y - 15 && d.y <= bin.y + 15 // Check if point is within the y range\n      );\n\n      // Calculate average HRV for this bin\n      const averageHRV = binData.length > 0 ? binData.reduce((sum, d) => sum + d.HRV, 0) / binData.length : 0;\n      const fillColor = colorScale(averageHRV); // Use average HRV to set the color\n\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        onMouseEnter: e => {\n          setTooltip({\n            display: 'block',\n            x: e.clientX,\n            y: e.clientY,\n            content: `Count: ${bin.length}, Avg HRV: ${averageHRV.toFixed(2)}`\n          });\n        },\n        onMouseLeave: () => {\n          setTooltip({\n            display: 'none'\n          });\n        },\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: d3.hexbin().hexagon(15) // Hexagon shape\n          ,\n          transform: `translate(${bin.x}, ${bin.y})` // Position the hexagon\n          ,\n          fill: fillColor // Set the fill based on average HRV\n          ,\n          stroke: \"black\" // Stroke color\n          ,\n          strokeWidth: 1 // Stroke width\n          ,\n          opacity: 0.7 // Adjust opacity if desired\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: tooltip.x,\n      y: tooltip.y,\n      style: {\n        display: tooltip.display,\n        pointerEvents: 'none'\n      },\n      fill: \"black\",\n      fontSize: \"12\",\n      textAnchor: \"middle\",\n      children: tooltip.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_s(Marks, \"cFcvUXz/VuJYq8f1l2ttuLcSJIo=\");\n_c = Marks;\nvar _c;\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"names":["React","useState","d3","jsxDEV","_jsxDEV","Marks","bins","data","_s","tooltip","setTooltip","display","hrvValues","map","d","HRV","colorScale","scaleLinear","domain","min","mean","max","range","className","children","bin","i","binData","filter","x","y","averageHRV","length","reduce","sum","fillColor","onMouseEnter","e","clientX","clientY","content","toFixed","onMouseLeave","hexbin","hexagon","transform","fill","stroke","strokeWidth","opacity","fileName","_jsxFileName","lineNumber","columnNumber","style","pointerEvents","fontSize","textAnchor","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/Marks.js"],"sourcesContent":["import React, { useState } from 'react';\nimport * as d3 from 'd3';\n\nexport const Marks = ({ bins, data }) => {\n    const [tooltip, setTooltip] = useState({ display: 'none' });\n\n    // Prepare the color scale for HRV values\n    const hrvValues = data.map(d => d.HRV); // Collect all HRV values\n    const colorScale = d3.scaleLinear()\n        .domain([\n            d3.min(hrvValues), \n            d3.mean(hrvValues), \n            d3.max(hrvValues)\n        ])\n        .range(['blue', 'lightblue', 'darkblue']); // Color range based on HRV values\n\n    return (\n        <g className=\"marks\">\n            {bins.map((bin, i) => {\n                // Filter data points that belong to this bin\n                const binData = data.filter(d => \n                    d.x >= bin.x - 15 && d.x <= bin.x + 15 && // Check if point is within the x range\n                    d.y >= bin.y - 15 && d.y <= bin.y + 15    // Check if point is within the y range\n                );\n\n                // Calculate average HRV for this bin\n                const averageHRV = binData.length > 0 \n                    ? binData.reduce((sum, d) => sum + d.HRV, 0) / binData.length \n                    : 0;\n\n                const fillColor = colorScale(averageHRV); // Use average HRV to set the color\n\n                return (\n                    <g key={i} \n                       onMouseEnter={(e) => {\n                           setTooltip({\n                               display: 'block',\n                               x: e.clientX,\n                               y: e.clientY,\n                               content: `Count: ${bin.length}, Avg HRV: ${averageHRV.toFixed(2)}`,\n                           });\n                       }}\n                       onMouseLeave={() => {\n                           setTooltip({ display: 'none' });\n                       }}>\n                    <path\n                        d={d3.hexbin().hexagon(15)} // Hexagon shape\n                        transform={`translate(${bin.x}, ${bin.y})`} // Position the hexagon\n                        fill={fillColor} // Set the fill based on average HRV\n                        stroke=\"black\" // Stroke color\n                        strokeWidth={1} // Stroke width\n                        opacity={0.7} // Adjust opacity if desired\n                    />\n                    </g>\n                );\n            })}\n            {/* Tooltip */}\n            <text \n                x={tooltip.x} \n                y={tooltip.y} \n                style={{ display: tooltip.display, pointerEvents: 'none' }} \n                fill=\"black\" \n                fontSize=\"12\" \n                textAnchor=\"middle\">\n                {tooltip.content}\n            </text>\n        </g>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}