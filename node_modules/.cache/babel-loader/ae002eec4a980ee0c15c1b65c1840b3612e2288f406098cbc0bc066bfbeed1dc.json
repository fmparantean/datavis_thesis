{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport { useMap } from 'react-leaflet'; // Ensure you're using the map context\nimport L from 'leaflet'; // Required for Leaflet functions\nimport { scaleLinear } from 'd3'; // D3 scale for coloring\nimport * as d3 from 'd3'; // D3 for utility functions\n\nexport const BubbleMap = ({\n  data\n}) => {\n  _s();\n  const map = useMap(); // Grab the Leaflet map instance\n\n  // Color scale for HRV values\n  const colorScale = scaleLinear().domain([d3.min(data, d => d.HRV), d3.mean(data, d => d.HRV), d3.max(data, d => d.HRV)]) // HRV values\n  .range(['lightblue', 'blue', 'darkblue']); // Define the color range\n\n  // Ensure we have valid data\n  if (!data || data.length === 0) {\n    console.error(\"No data provided to BubbleMap.\");\n    return null;\n  }\n\n  // Create hexagons for each data point\n  data.forEach(point => {\n    const coords = point.LocationCoordinates;\n\n    // Verify valid coordinates\n    if (!coords || coords.length < 2) {\n      console.error(\"Invalid coordinates for point:\", point);\n      return; // Skip if invalid\n    }\n\n    // Generate hexagon shape\n    const hexagon = generateHexagon(coords[0], coords[1], 20); // Use radius of 20\n\n    // Add hexagon to the map\n    L.polygon(hexagon, {\n      color: colorScale(point.HRV),\n      // Use HRV value for coloring\n      fillColor: colorScale(point.HRV),\n      // Fill color based on HRV\n      fillOpacity: 0.6,\n      weight: 1\n    }).addTo(map);\n  });\n  return null; // No rendering directly from this component\n};\n\n// Function to generate hexagon vertices given a center and radius\n_s(BubbleMap, \"cX187cvZ2hODbkaiLn05gMk1sCM=\", false, function () {\n  return [useMap];\n});\n_c = BubbleMap;\nconst generateHexagon = (lat, lng, radius) => {\n  const angle = Math.PI / 3; // 60 degrees\n  const points = [];\n  for (let i = 0; i < 6; i++) {\n    points.push([lat + radius * Math.sin(angle * i),\n    // Latitude adjustment\n    lng + radius * Math.cos(angle * i) // Longitude adjustment\n    ]);\n  }\n  return points; // Return the hexagon's vertices\n};\nvar _c;\n$RefreshReg$(_c, \"BubbleMap\");","map":{"version":3,"names":["React","useMap","L","scaleLinear","d3","BubbleMap","data","_s","map","colorScale","domain","min","d","HRV","mean","max","range","length","console","error","forEach","point","coords","LocationCoordinates","hexagon","generateHexagon","polygon","color","fillColor","fillOpacity","weight","addTo","_c","lat","lng","radius","angle","Math","PI","points","i","push","sin","cos","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js"],"sourcesContent":["import React from 'react';\nimport { useMap } from 'react-leaflet'; // Ensure you're using the map context\nimport L from 'leaflet'; // Required for Leaflet functions\nimport { scaleLinear } from 'd3'; // D3 scale for coloring\nimport * as d3 from 'd3'; // D3 for utility functions\n\nexport const BubbleMap = ({ data }) => {\n    const map = useMap(); // Grab the Leaflet map instance\n\n    // Color scale for HRV values\n    const colorScale = scaleLinear()\n        .domain([d3.min(data, d => d.HRV), d3.mean(data, d => d.HRV), d3.max(data, d => d.HRV)]) // HRV values\n        .range(['lightblue', 'blue', 'darkblue']); // Define the color range\n\n    // Ensure we have valid data\n    if (!data || data.length === 0) {\n        console.error(\"No data provided to BubbleMap.\");\n        return null;\n    }\n\n    // Create hexagons for each data point\n    data.forEach(point => {\n        const coords = point.LocationCoordinates;\n\n        // Verify valid coordinates\n        if (!coords || coords.length < 2) {\n            console.error(\"Invalid coordinates for point:\", point);\n            return; // Skip if invalid\n        }\n\n        // Generate hexagon shape\n        const hexagon = generateHexagon(coords[0], coords[1], 20); // Use radius of 20\n\n        // Add hexagon to the map\n        L.polygon(hexagon, {\n            color: colorScale(point.HRV), // Use HRV value for coloring\n            fillColor: colorScale(point.HRV), // Fill color based on HRV\n            fillOpacity: 0.6,\n            weight: 1,\n        }).addTo(map);\n    });\n\n    return null; // No rendering directly from this component\n};\n\n// Function to generate hexagon vertices given a center and radius\nconst generateHexagon = (lat, lng, radius) => {\n    const angle = (Math.PI / 3); // 60 degrees\n    const points = [];\n    for (let i = 0; i < 6; i++) {\n        points.push([\n            lat + (radius * Math.sin(angle * i)), // Latitude adjustment\n            lng + (radius * Math.cos(angle * i)), // Longitude adjustment\n        ]);\n    }\n    return points; // Return the hexagon's vertices\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,eAAe,CAAC,CAAC;AACxC,OAAOC,CAAC,MAAM,SAAS,CAAC,CAAC;AACzB,SAASC,WAAW,QAAQ,IAAI,CAAC,CAAC;AAClC,OAAO,KAAKC,EAAE,MAAM,IAAI,CAAC,CAAC;;AAE1B,OAAO,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAMC,GAAG,GAAGP,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEtB;EACA,MAAMQ,UAAU,GAAGN,WAAW,CAAC,CAAC,CAC3BO,MAAM,CAAC,CAACN,EAAE,CAACO,GAAG,CAACL,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACC,GAAG,CAAC,EAAET,EAAE,CAACU,IAAI,CAACR,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACC,GAAG,CAAC,EAAET,EAAE,CAACW,GAAG,CAACT,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC;EAAA,CACxFG,KAAK,CAAC,CAAC,WAAW,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;;EAE/C;EACA,IAAI,CAACV,IAAI,IAAIA,IAAI,CAACW,MAAM,KAAK,CAAC,EAAE;IAC5BC,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;IAC/C,OAAO,IAAI;EACf;;EAEA;EACAb,IAAI,CAACc,OAAO,CAACC,KAAK,IAAI;IAClB,MAAMC,MAAM,GAAGD,KAAK,CAACE,mBAAmB;;IAExC;IACA,IAAI,CAACD,MAAM,IAAIA,MAAM,CAACL,MAAM,GAAG,CAAC,EAAE;MAC9BC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEE,KAAK,CAAC;MACtD,OAAO,CAAC;IACZ;;IAEA;IACA,MAAMG,OAAO,GAAGC,eAAe,CAACH,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAE3D;IACApB,CAAC,CAACwB,OAAO,CAACF,OAAO,EAAE;MACfG,KAAK,EAAElB,UAAU,CAACY,KAAK,CAACR,GAAG,CAAC;MAAE;MAC9Be,SAAS,EAAEnB,UAAU,CAACY,KAAK,CAACR,GAAG,CAAC;MAAE;MAClCgB,WAAW,EAAE,GAAG;MAChBC,MAAM,EAAE;IACZ,CAAC,CAAC,CAACC,KAAK,CAACvB,GAAG,CAAC;EACjB,CAAC,CAAC;EAEF,OAAO,IAAI,CAAC,CAAC;AACjB,CAAC;;AAED;AAAAD,EAAA,CAvCaF,SAAS;EAAA,QACNJ,MAAM;AAAA;AAAA+B,EAAA,GADT3B,SAAS;AAwCtB,MAAMoB,eAAe,GAAGA,CAACQ,GAAG,EAAEC,GAAG,EAAEC,MAAM,KAAK;EAC1C,MAAMC,KAAK,GAAIC,IAAI,CAACC,EAAE,GAAG,CAAE,CAAC,CAAC;EAC7B,MAAMC,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxBD,MAAM,CAACE,IAAI,CAAC,CACRR,GAAG,GAAIE,MAAM,GAAGE,IAAI,CAACK,GAAG,CAACN,KAAK,GAAGI,CAAC,CAAE;IAAE;IACtCN,GAAG,GAAIC,MAAM,GAAGE,IAAI,CAACM,GAAG,CAACP,KAAK,GAAGI,CAAC,CAAE,CAAE;IAAA,CACzC,CAAC;EACN;EACA,OAAOD,MAAM,CAAC,CAAC;AACnB,CAAC;AAAC,IAAAP,EAAA;AAAAY,YAAA,CAAAZ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}