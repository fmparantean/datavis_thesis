{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 2/src/BubbleMap/Marks.js\";\nimport { geoMercator, geoPath, geoGraticule } from 'd3';\nimport hexbin from 'd3-hexbin'; // Import hexbin\n\n// Create a projection centered over Braunschweig\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projection = geoMercator().center([10.5268, 52.2665]) // Center over Braunschweig\n.scale(300000) // Adjust scale for zoom level\n.translate([450, 300]); // Translate to fit your SVG dimensions\n\nconst path = geoPath(projection);\nconst graticule = geoGraticule();\n\n// Create a hexbin generator\nconst hexbinGenerator = hexbin().size([900, 600]) // Set size based on your SVG\n.radius(20); // Adjust radius for the hexagons\n\nexport const Marks = ({\n  worldAtlas: {\n    land,\n    interiors\n  },\n  data,\n  sizeScale,\n  sizeValue\n}) => {\n  // Generate the hexagon coordinates\n  const hexagons = hexbinGenerator(data.map(d => {\n    const [longitude, latitude] = d.coords; // Ensure [longitude, latitude]\n    return projection([longitude, latitude]);\n  }));\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"marks\",\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"sphere\",\n      d: path({\n        type: 'Sphere'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"graticules\",\n      d: path(graticule())\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), land.features.map((feature, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"land\",\n      d: path(feature)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"interiors\",\n      d: path(interiors)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), hexagons.map((hex, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n      children: /*#__PURE__*/_jsxDEV(\"path\", {\n        d: hex.hexagon(),\n        fill: \"steelblue\",\n        stroke: \"white\",\n        strokeWidth: 1,\n        opacity: 0.6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_c = Marks;\nvar _c;\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"names":["geoMercator","geoPath","geoGraticule","hexbin","jsxDEV","_jsxDEV","projection","center","scale","translate","path","graticule","hexbinGenerator","size","radius","Marks","worldAtlas","land","interiors","data","sizeScale","sizeValue","hexagons","map","d","longitude","latitude","coords","className","children","type","fileName","_jsxFileName","lineNumber","columnNumber","features","feature","index","hex","hexagon","fill","stroke","strokeWidth","opacity","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 2/src/BubbleMap/Marks.js"],"sourcesContent":["import { geoMercator, geoPath, geoGraticule } from 'd3';\nimport hexbin from 'd3-hexbin'; // Import hexbin\n\n// Create a projection centered over Braunschweig\nconst projection = geoMercator()\n  .center([10.5268, 52.2665]) // Center over Braunschweig\n  .scale(300000) // Adjust scale for zoom level\n  .translate([450, 300]); // Translate to fit your SVG dimensions\n\nconst path = geoPath(projection);\nconst graticule = geoGraticule();\n\n// Create a hexbin generator\nconst hexbinGenerator = hexbin()\n  .size([900, 600]) // Set size based on your SVG\n  .radius(20); // Adjust radius for the hexagons\n\nexport const Marks = ({\n  worldAtlas: { land, interiors },\n  data,\n  sizeScale,\n  sizeValue\n}) => {\n  // Generate the hexagon coordinates\n  const hexagons = hexbinGenerator(data.map(d => {\n    const [longitude, latitude] = d.coords; // Ensure [longitude, latitude]\n    return projection([longitude, latitude]);\n  }));\n\n  return (\n    <g className=\"marks\">\n      <path className=\"sphere\" d={path({ type: 'Sphere' })} />\n      <path className=\"graticules\" d={path(graticule())} />\n      {land.features.map((feature, index) => (\n        <path key={index} className=\"land\" d={path(feature)} />\n      ))}\n      <path className=\"interiors\" d={path(interiors)} />\n      {hexagons.map((hex, index) => (\n        <g key={index}>\n          <path\n            d={hex.hexagon()}\n            fill=\"steelblue\"\n            stroke=\"white\"\n            strokeWidth={1}\n            opacity={0.6}\n          />\n        </g>\n      ))}\n    </g>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}