{"ast":null,"code":"import React,{useState}from'react';import*as d3 from'd3';import{hexbin as d3Hexbin}from'd3-hexbin';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const Marks=_ref=>{let{bins,data,yValueField}=_ref;const[tooltip,setTooltip]=useState({display:'none'});const hrvValues=data.map(d=>d[yValueField]).filter(h=>h!=null&&h!==0);const colorScale=d3.scaleLinear().domain([d3.min(hrvValues),d3.mean(hrvValues),d3.max(hrvValues)]).range(['yellow','orange','red']);return/*#__PURE__*/_jsxs(\"g\",{className:\"marks\",children:[bins.map((bin,i)=>{const binData=data.filter(d=>d.x>=bin.x-15&&d.x<=bin.x+15&&d.y>=bin.y-15&&d.y<=bin.y+15);// Filter out only valid data points (non-null and non-zero)\nconst validDataPoints=binData.filter(d=>d[yValueField]!=null&&d[yValueField]!==0);// Calculate mean from valid data points\nconst meanValue=validDataPoints.length>0?validDataPoints.reduce((sum,d)=>sum+d[yValueField],0)/validDataPoints.length:0;// Skip rendering this bin if the meanValue is 0 or no valid data points\nif(meanValue===0||validDataPoints.length===0){return null;// Skip this bin\n}const fillColor=colorScale(meanValue);return/*#__PURE__*/_jsx(\"g\",{onMouseEnter:e=>{// Show the tooltip with mean value\nsetTooltip({display:'block',x:e.clientX,y:e.clientY,content:`Count: ${validDataPoints.length}, Mean ${yValueField}: ${meanValue.toFixed(2)}`});},onMouseLeave:()=>{setTooltip({display:'none'});},children:/*#__PURE__*/_jsx(\"path\",{d:d3Hexbin().hexagon(5),transform:`translate(${bin.x}, ${bin.y})`,fill:fillColor,stroke:\"black\",strokeWidth:1})},i);}),/*#__PURE__*/_jsx(\"text\",{x:tooltip.x,y:tooltip.y,style:{display:tooltip.display,pointerEvents:'none'},fill:\"black\",fontSize:\"12\",textAnchor:\"middle\",children:tooltip.content})]});};","map":{"version":3,"names":["React","useState","d3","hexbin","d3Hexbin","jsx","_jsx","jsxs","_jsxs","Marks","_ref","bins","data","yValueField","tooltip","setTooltip","display","hrvValues","map","d","filter","h","colorScale","scaleLinear","domain","min","mean","max","range","className","children","bin","i","binData","x","y","validDataPoints","meanValue","length","reduce","sum","fillColor","onMouseEnter","e","clientX","clientY","content","toFixed","onMouseLeave","hexagon","transform","fill","stroke","strokeWidth","style","pointerEvents","fontSize","textAnchor"],"sources":["/Users/fmparantean/Documents/dataviz_project/src/HexbinMap/Marks.js"],"sourcesContent":["import React, { useState } from 'react';\nimport * as d3 from 'd3'; \nimport { hexbin as d3Hexbin } from 'd3-hexbin'; \n\nexport const Marks = ({ bins, data, yValueField }) => {\n    const [tooltip, setTooltip] = useState({ display: 'none' });\n\n    const hrvValues = data.map(d => d[yValueField]).filter(h => h != null && h !== 0);\n    const colorScale = d3.scaleLinear()\n        .domain([d3.min(hrvValues), d3.mean(hrvValues), d3.max(hrvValues)]) \n        .range(['yellow', 'orange', 'red']); \n\n    return (\n        <g className=\"marks\">\n            {bins.map((bin, i) => {\n                const binData = data.filter(d => \n                    d.x >= bin.x - 15 && d.x <= bin.x + 15 &&\n                    d.y >= bin.y - 15 && d.y <= bin.y + 15\n                );\n\n                // Filter out only valid data points (non-null and non-zero)\n                const validDataPoints = binData.filter(d => d[yValueField] != null && d[yValueField] !== 0);\n\n                // Calculate mean from valid data points\n                const meanValue = validDataPoints.length > 0 \n                    ? validDataPoints.reduce((sum, d) => sum + d[yValueField], 0) / validDataPoints.length \n                    : 0;\n\n                // Skip rendering this bin if the meanValue is 0 or no valid data points\n                if (meanValue === 0 || validDataPoints.length === 0) {\n                    return null; // Skip this bin\n                }\n\n                const fillColor = colorScale(meanValue);\n\n                return (\n                    <g key={i}\n                       onMouseEnter={(e) => {\n                           // Show the tooltip with mean value\n                           setTooltip({\n                               display: 'block',\n                               x: e.clientX,\n                               y: e.clientY,\n                               content: `Count: ${validDataPoints.length}, Mean ${yValueField}: ${meanValue.toFixed(2)}`, \n                           });\n                       }}\n                       onMouseLeave={() => {\n                           setTooltip({ display: 'none' });\n                       }}>\n                        <path \n                            d={d3Hexbin().hexagon(5)} \n                            transform={`translate(${bin.x}, ${bin.y})`} \n                            fill={fillColor} \n                            stroke=\"black\" \n                            strokeWidth={1} \n                        />\n                    </g>\n                );\n            })}\n            <text \n                x={tooltip.x} \n                y={tooltip.y} \n                style={{ display: tooltip.display, pointerEvents: 'none' }} \n                fill=\"black\" \n                fontSize=\"12\" \n                textAnchor=\"middle\">\n                {tooltip.content}\n            </text>\n        </g>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}