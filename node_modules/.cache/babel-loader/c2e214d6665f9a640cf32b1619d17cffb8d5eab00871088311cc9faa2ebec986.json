{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 2/src/BubbleMap/index.js\";\nimport React from 'react';\nimport { scaleSqrt, max, hexbin } from 'd3';\nimport { geoNaturalEarth1 } from 'd3-geo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sizeValue = d => d.HRV; // Use HRV for size\n\nexport const BubbleMap = ({\n  data,\n  worldAtlas\n}) => {\n  const width = 900;\n  const height = 600;\n  const projection = geoNaturalEarth1().center([10.527004, 52.210297]) // Center over Braunschweig\n  .scale(150000).translate([width / 2, height / 2]);\n\n  // Set up the hexbin layout\n  const hex = hexbin().radius(10).x(d => projection([d.longitude, d.latitude])[0]) // Longitude\n  .y(d => projection([d.longitude, d.latitude])[1]); // Latitude\n\n  // Generate hexagonal bins from data\n  const bins = hex(data);\n\n  // Create color scale. Adjust this as needed.\n  const colorScale = d3.scaleSequential().domain([0, max(bins, d => d.length)]) // Use bin length for color\n  .interpolator(d3.interpolateYlOrRd);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: width,\n    height: height,\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"hexbin\",\n      children: bins.map((bin, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          d: hex.hexagon() // Draw the hexagon shape\n          ,\n          transform: `translate(${bin.x}, ${bin.y})` // Position the hexagon\n          ,\n          fill: colorScale(bin.length) // Set color based on the count\n          ,\n          stroke: \"black\" // Optional stroke for better visibility\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"title\", {\n          children: [`${bin.length} stores`, \" // Tooltip for hexagon\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_c = BubbleMap;\nvar _c;\n$RefreshReg$(_c, \"BubbleMap\");","map":{"version":3,"names":["React","scaleSqrt","max","hexbin","geoNaturalEarth1","jsxDEV","_jsxDEV","sizeValue","d","HRV","BubbleMap","data","worldAtlas","width","height","projection","center","scale","translate","hex","radius","x","longitude","latitude","y","bins","colorScale","d3","scaleSequential","domain","length","interpolator","interpolateYlOrRd","children","className","map","bin","index","hexagon","transform","fill","stroke","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 2/src/BubbleMap/index.js"],"sourcesContent":["import React from 'react';\nimport { scaleSqrt, max, hexbin } from 'd3';\nimport { geoNaturalEarth1 } from 'd3-geo';\n\nconst sizeValue = d => d.HRV; // Use HRV for size\n\nexport const BubbleMap = ({ data, worldAtlas }) => {\n  const width = 900;\n  const height = 600;\n\n  const projection = geoNaturalEarth1()\n    .center([10.527004, 52.210297]) // Center over Braunschweig\n    .scale(150000)\n    .translate([width / 2, height / 2]);\n\n  // Set up the hexbin layout\n  const hex = hexbin()\n    .radius(10)\n    .x(d => projection([d.longitude, d.latitude])[0]) // Longitude\n    .y(d => projection([d.longitude, d.latitude])[1]); // Latitude\n\n  // Generate hexagonal bins from data\n  const bins = hex(data);\n\n  // Create color scale. Adjust this as needed.\n  const colorScale = d3.scaleSequential()\n    .domain([0, max(bins, d => d.length)]) // Use bin length for color\n    .interpolator(d3.interpolateYlOrRd);\n\n  return (\n    <svg width={width} height={height}>\n      <g className=\"hexbin\">\n        {bins.map((bin, index) => (\n          <g key={index}>\n            <path\n              d={hex.hexagon()} // Draw the hexagon shape\n              transform={`translate(${bin.x}, ${bin.y})`} // Position the hexagon\n              fill={colorScale(bin.length)} // Set color based on the count\n              stroke=\"black\" // Optional stroke for better visibility\n            />\n            <title>\n              {`${bin.length} stores`} // Tooltip for hexagon\n            </title>\n          </g>\n        ))}\n      </g>\n    </svg>\n  );\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,GAAG,EAAEC,MAAM,QAAQ,IAAI;AAC3C,SAASC,gBAAgB,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,SAAS,GAAGC,CAAC,IAAIA,CAAC,CAACC,GAAG,CAAC,CAAC;;AAE9B,OAAO,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EACjD,MAAMC,KAAK,GAAG,GAAG;EACjB,MAAMC,MAAM,GAAG,GAAG;EAElB,MAAMC,UAAU,GAAGX,gBAAgB,CAAC,CAAC,CAClCY,MAAM,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;EAAA,CAC/BC,KAAK,CAAC,MAAM,CAAC,CACbC,SAAS,CAAC,CAACL,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC,CAAC;;EAErC;EACA,MAAMK,GAAG,GAAGhB,MAAM,CAAC,CAAC,CACjBiB,MAAM,CAAC,EAAE,CAAC,CACVC,CAAC,CAACb,CAAC,IAAIO,UAAU,CAAC,CAACP,CAAC,CAACc,SAAS,EAAEd,CAAC,CAACe,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAAA,CACjDC,CAAC,CAAChB,CAAC,IAAIO,UAAU,CAAC,CAACP,CAAC,CAACc,SAAS,EAAEd,CAAC,CAACe,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAErD;EACA,MAAME,IAAI,GAAGN,GAAG,CAACR,IAAI,CAAC;;EAEtB;EACA,MAAMe,UAAU,GAAGC,EAAE,CAACC,eAAe,CAAC,CAAC,CACpCC,MAAM,CAAC,CAAC,CAAC,EAAE3B,GAAG,CAACuB,IAAI,EAAEjB,CAAC,IAAIA,CAAC,CAACsB,MAAM,CAAC,CAAC,CAAC,CAAC;EAAA,CACtCC,YAAY,CAACJ,EAAE,CAACK,iBAAiB,CAAC;EAErC,oBACE1B,OAAA;IAAKO,KAAK,EAAEA,KAAM;IAACC,MAAM,EAAEA,MAAO;IAAAmB,QAAA,eAChC3B,OAAA;MAAG4B,SAAS,EAAC,QAAQ;MAAAD,QAAA,EAClBR,IAAI,CAACU,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACnB/B,OAAA;QAAA2B,QAAA,gBACE3B,OAAA;UACEE,CAAC,EAAEW,GAAG,CAACmB,OAAO,CAAC,CAAE,CAAC;UAAA;UAClBC,SAAS,EAAE,aAAaH,GAAG,CAACf,CAAC,KAAKe,GAAG,CAACZ,CAAC,GAAI,CAAC;UAAA;UAC5CgB,IAAI,EAAEd,UAAU,CAACU,GAAG,CAACN,MAAM,CAAE,CAAC;UAAA;UAC9BW,MAAM,EAAC,OAAO,CAAC;QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB,CAAC,eACFvC,OAAA;UAAA2B,QAAA,GACG,GAAGG,GAAG,CAACN,MAAM,SAAS,EAAC,yBAC1B;QAAA;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA,GATFR,KAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUV,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACC,EAAA,GA1CWpC,SAAS;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}