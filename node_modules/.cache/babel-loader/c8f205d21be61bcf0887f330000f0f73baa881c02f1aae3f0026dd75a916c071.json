{"ast":null,"code":"var _s = $RefreshSig$();\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson';\nconst jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';\nexport const useWorldAtlas = () => {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    json(jsonUrl).then(topology => {\n      const {\n        countries,\n        land\n      } = topology.objects;\n      setData({\n        land: feature(topology, land),\n        interiors: mesh(topology, countries, (a, b) => a !== b)\n      });\n    });\n  }, []);\n  return data;\n};\n_s(useWorldAtlas, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");","map":{"version":3,"names":["json","feature","mesh","jsonUrl","useWorldAtlas","_s","data","setData","useState","useEffect","then","topology","countries","land","objects","interiors","a","b"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/useWorldAtlas.js"],"sourcesContent":["import { json } from 'd3';\nimport { feature, mesh } from 'topojson';\n\nconst jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';\n\nexport const useWorldAtlas = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    json(jsonUrl).then(topology => {\n      const { countries, land } = topology.objects;\n      setData({\n        land: feature(topology, land),\n        interiors: mesh(topology, countries, (a, b) => a !== b)\n      });\n    });\n  }, []);\n\n  return data;\n};\n"],"mappings":";AAAA,SAASA,IAAI,QAAQ,IAAI;AACzB,SAASC,OAAO,EAAEC,IAAI,QAAQ,UAAU;AAExC,MAAMC,OAAO,GAAG,wDAAwD;AAExE,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdT,IAAI,CAACG,OAAO,CAAC,CAACO,IAAI,CAACC,QAAQ,IAAI;MAC7B,MAAM;QAAEC,SAAS;QAAEC;MAAK,CAAC,GAAGF,QAAQ,CAACG,OAAO;MAC5CP,OAAO,CAAC;QACNM,IAAI,EAAEZ,OAAO,CAACU,QAAQ,EAAEE,IAAI,CAAC;QAC7BE,SAAS,EAAEb,IAAI,CAACS,QAAQ,EAAEC,SAAS,EAAE,CAACI,CAAC,EAAEC,CAAC,KAAKD,CAAC,KAAKC,CAAC;MACxD,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOX,IAAI;AACb,CAAC;AAACD,EAAA,CAdWD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}