{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 5/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport './App.css';\nimport { useData } from './useData';\nimport { Hexbinmap } from './HexbinMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\nimport { scaleLinear } from 'd3';\nimport ColorLegend from './HexbinMap/ColorLegend.js';\nimport * as d3 from 'd3';\nimport Filters from './Filters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 900;\nconst height = 750;\nconst dateHistogramSize = 0.27;\nconst orderedDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nconst App = () => {\n  _s();\n  const worldAtlas = useWorldAtlas();\n  const data = useData();\n  const [brushExtent, setBrushExtent] = useState(null);\n  const [participant, setParticipant] = useState(\"All\");\n  const [gender, setGender] = useState(\"Both\");\n  const [modeButton, setModeButton] = useState(\"Both\");\n  const [yValueField, setYValueField] = useState(\"HRV\");\n  if (!worldAtlas || !data || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: /*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: height / 2,\n        textAnchor: \"middle\",\n        fontSize: \"14\",\n        fill: \"black\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this);\n  }\n\n  // Get unique participants dynamically and sort them\n  const uniqueParticipants = Array.from(new Set(data.map(d => d.Participant))).sort((a, b) => a - b); // Sort values from smallest to largest\n\n  // Filter Data based on selected criteria\n  const filteredData = data.filter(d => {\n    const participantFilter = participant === \"All\" || d.Participant.toString() === participant;\n    const genderFilter = gender === \"Both\" || d.Gender === gender;\n    const modeButtonFilter = modeButton === \"Both\" || d.ModeButton_xs === modeButton;\n    return participantFilter && genderFilter && modeButtonFilter;\n  });\n  const hrvValues = filteredData.map(d => d[yValueField]).filter(h => h != null);\n  const colorScale = scaleLinear().domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0]).range(['yellow', 'orange', 'red']);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(Filters, {\n        participant: participant,\n        setParticipant: setParticipant,\n        gender: gender,\n        setGender: setGender,\n        modeButton: modeButton,\n        setModeButton: setModeButton,\n        yValueField: yValueField,\n        setYValueField: setYValueField,\n        uniqueParticipants: uniqueParticipants\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"bus.png\",\n        alt: \"bus Logo\",\n        style: {\n          width: '100px',\n          height: 'auto',\n          marginTop: '300px',\n          alignSelf: 'right'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: [/*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: 40,\n        textAnchor: \"middle\",\n        className: \"title\",\n        children: \"THE HRV DISTRIBUTION\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"image\", {\n        id: \"map-image\",\n        href: \"map11.png\",\n        x: \"150\",\n        y: \"10\",\n        height: \"20px\",\n        width: \"auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(0, 10)`,\n        children: /*#__PURE__*/_jsxDEV(Hexbinmap, {\n          data: brushExtent ? filteredData.filter(d => brushExtent.includes(orderedDays[d.DayOrder])) : [],\n          worldAtlas: worldAtlas,\n          yValueField: yValueField // Pass yValueField if needed for logic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(0, ${height - dateHistogramSize * height})`,\n        children: /*#__PURE__*/_jsxDEV(DateHistogram, {\n          data: filteredData,\n          width: width,\n          height: dateHistogramSize * height,\n          setBrushExtent: setBrushExtent,\n          xValue: d => d.DayOrder,\n          yValueField: yValueField // Pass the selected Y-value field\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(650, 480)`,\n        children: /*#__PURE__*/_jsxDEV(ColorLegend, {\n          colorScale: colorScale,\n          yValueField: yValueField,\n          data: filteredData // Pass the filtered data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"r4lMho1XQ4f694ezHYNK4lfCIGE=\", false, function () {\n  return [useWorldAtlas, useData];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useWorldAtlas","useData","Hexbinmap","DateHistogram","scaleLinear","ColorLegend","d3","Filters","jsxDEV","_jsxDEV","width","height","dateHistogramSize","orderedDays","App","_s","worldAtlas","data","brushExtent","setBrushExtent","participant","setParticipant","gender","setGender","modeButton","setModeButton","yValueField","setYValueField","length","children","x","y","textAnchor","fontSize","fill","fileName","_jsxFileName","lineNumber","columnNumber","uniqueParticipants","Array","from","Set","map","d","Participant","sort","a","b","filteredData","filter","participantFilter","toString","genderFilter","Gender","modeButtonFilter","ModeButton_xs","hrvValues","h","colorScale","domain","min","mean","max","range","style","display","className","src","alt","marginTop","alignSelf","id","href","transform","includes","DayOrder","xValue","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 5/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport './App.css';\nimport { useData } from './useData';\nimport { Hexbinmap } from './HexbinMap/index.js';\nimport { DateHistogram } from './DateHistogram/index.js';\nimport { scaleLinear } from 'd3';\nimport ColorLegend from './HexbinMap/ColorLegend.js'; \nimport * as d3 from 'd3'; \nimport Filters from './Filters'; \n\nconst width = 900;\nconst height = 750;\nconst dateHistogramSize = 0.27;\nconst orderedDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]; \n\nconst App = () => {\n    const worldAtlas = useWorldAtlas();\n    const data = useData(); \n\n    const [brushExtent, setBrushExtent] = useState(null);\n    const [participant, setParticipant] = useState(\"All\");\n    const [gender, setGender] = useState(\"Both\");\n    const [modeButton, setModeButton] = useState(\"Both\");\n    const [yValueField, setYValueField] = useState(\"HRV\");\n\n    if (!worldAtlas || !data || data.length === 0) {\n        return (\n          <svg width={width} height={height}>\n            <text\n              x={width / 2} \n              y={height / 2} \n              textAnchor=\"middle\" \n              fontSize=\"14\" \n              fill=\"black\" \n            >\n              Loading...\n            </text>\n          </svg>\n        ); \n    }\n\n    // Get unique participants dynamically and sort them\n    const uniqueParticipants = Array.from(new Set(data.map(d => d.Participant)))\n        .sort((a, b) => a - b); // Sort values from smallest to largest\n\n    // Filter Data based on selected criteria\n    const filteredData = data.filter(d => {\n        const participantFilter = participant === \"All\" || d.Participant.toString() === participant;\n        const genderFilter = gender === \"Both\" || d.Gender === gender; \n        const modeButtonFilter = modeButton === \"Both\" || d.ModeButton_xs === modeButton;\n        \n        return participantFilter && genderFilter && modeButtonFilter;\n    });\n\n    const hrvValues = filteredData.map(d => d[yValueField]).filter(h => h != null); \n    const colorScale = scaleLinear()\n        .domain([d3.min(hrvValues) || 0, d3.mean(hrvValues) || 0, d3.max(hrvValues) || 0])\n        .range(['yellow', 'orange', 'red']); \n\n    return (\n        <div style={{ display: 'flex' }}>\n            <div className=\"filters\"> {/* Keep filters on the left */}\n                <Filters \n                    participant={participant} \n                    setParticipant={setParticipant} \n                    gender={gender} \n                    setGender={setGender} \n                    modeButton={modeButton} \n                    setModeButton={setModeButton}\n                    yValueField={yValueField}\n                    setYValueField={setYValueField}\n                    uniqueParticipants={uniqueParticipants} \n                />\n\n            <img \n                src=\"bus.png\" \n                alt=\"bus Logo\" \n                style={{ width: '100px', height: 'auto', marginTop: '300px', alignSelf: 'right' }} \n            />\n            </div>\n            \n            <svg width={width} height={height}>\n                <text\n                    x={width / 2} \n                    y={40} \n                    textAnchor=\"middle\" \n                    className=\"title\" \n                >\n                    THE HRV DISTRIBUTION\n                </text>\n                \n                <image \n                    id='map-image'\n                    href=\"map11.png\" \n                    x=\"150\" \n                    y=\"10\" \n                    height=\"20px\" \n                    width=\"auto\" \n                />\n                \n                \n                \n                <g transform={`translate(0, 10)`}>\n                    <Hexbinmap \n                        data={brushExtent ? filteredData.filter(d => brushExtent.includes(orderedDays[d.DayOrder])) : []} \n                        worldAtlas={worldAtlas} \n                        yValueField={yValueField} // Pass yValueField if needed for logic\n                    />\n                </g>\n                <g transform={`translate(0, ${height - dateHistogramSize * height})`}>\n                    <DateHistogram\n                        data={filteredData} \n                        width={width}\n                        height={dateHistogramSize * height}\n                        setBrushExtent={setBrushExtent}\n                        xValue={d => d.DayOrder} \n                        yValueField={yValueField} // Pass the selected Y-value field\n                    />\n                </g>\n\n                <g transform={`translate(650, 480)`}>\n                    <ColorLegend \n                        colorScale={colorScale} \n                        yValueField={yValueField} \n                        data={filteredData}  // Pass the filtered data\n                    /> \n                </g>\n            </svg>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}