{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/Marks.js\";\nimport { geoNaturalEarth1 } from 'd3';\nimport { hexbin as d3Hexbin } from 'd3-hexbin'; // Ensure to import hexbin\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projection = geoNaturalEarth1().center([10.537004, 52.210297]) // Center over Braunschweig, Germany\n.scale(160000).translate([450, 300]);\nexport const Marks = ({\n  bins\n}) => {\n  const hexbin = d3Hexbin(); // Initialize hexbin here\n\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"marks\",\n    children: bins.map((bin, i) => {\n      if (bin.length === 0) return null; // Skip empty bins\n\n      const [x, y] = d3Hexbin().centroid(bin); // Get the centroid for the hexagon\n\n      return /*#__PURE__*/_jsxDEV(\"path\", {\n        d: hexbin.hexagon(10) // Use the hexbin to create a hexagon shape\n        ,\n        transform: `translate(${x}, ${y})` // Position the hexagon by centroid\n        ,\n        fill: \"orange\" // Adjust color as needed\n        ,\n        stroke: \"black\",\n        strokeWidth: 1\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n_c = Marks;\nvar _c;\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"names":["geoNaturalEarth1","hexbin","d3Hexbin","jsxDEV","_jsxDEV","projection","center","scale","translate","Marks","bins","className","children","map","bin","i","length","x","y","centroid","d","hexagon","transform","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/Marks.js"],"sourcesContent":["import { geoNaturalEarth1 } from 'd3';\nimport { hexbin as d3Hexbin } from 'd3-hexbin'; // Ensure to import hexbin\n\nconst projection = geoNaturalEarth1()\n    .center([10.537004, 52.210297]) // Center over Braunschweig, Germany\n    .scale(160000)\n    .translate([450, 300]);\n\nexport const Marks = ({ bins }) => {\n    const hexbin = d3Hexbin(); // Initialize hexbin here\n\n    return (\n        <g className=\"marks\">\n            {bins.map((bin, i) => {\n                if (bin.length === 0) return null; // Skip empty bins\n\n                const [x, y] = d3Hexbin().centroid(bin); // Get the centroid for the hexagon\n\n                return (\n                    <path\n                        key={i}\n                        d={hexbin.hexagon(10)} // Use the hexbin to create a hexagon shape\n                        transform={`translate(${x}, ${y})`} // Position the hexagon by centroid\n                        fill=\"orange\" // Adjust color as needed\n                        stroke=\"black\"\n                        strokeWidth={1}\n                    />\n                );\n            })}\n        </g>\n    );\n};"],"mappings":";AAAA,SAASA,gBAAgB,QAAQ,IAAI;AACrC,SAASC,MAAM,IAAIC,QAAQ,QAAQ,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,UAAU,GAAGL,gBAAgB,CAAC,CAAC,CAChCM,MAAM,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;AAAA,CAC/BC,KAAK,CAAC,MAAM,CAAC,CACbC,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAE1B,OAAO,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC/B,MAAMT,MAAM,GAAGC,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE3B,oBACIE,OAAA;IAAGO,SAAS,EAAC,OAAO;IAAAC,QAAA,EACfF,IAAI,CAACG,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAClB,IAAID,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC,CAAC;;MAEnC,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAACiB,QAAQ,CAACL,GAAG,CAAC,CAAC,CAAC;;MAEzC,oBACIV,OAAA;QAEIgB,CAAC,EAAEnB,MAAM,CAACoB,OAAO,CAAC,EAAE,CAAE,CAAC;QAAA;QACvBC,SAAS,EAAE,aAAaL,CAAC,KAAKC,CAAC,GAAI,CAAC;QAAA;QACpCK,IAAI,EAAC,QAAQ,CAAC;QAAA;QACdC,MAAM,EAAC,OAAO;QACdC,WAAW,EAAE;MAAE,GALVV,CAAC;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMT,CAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ,CAAC;AAACC,EAAA,GAvBWrB,KAAK;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}