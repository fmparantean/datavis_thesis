{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js\";\nimport React from 'react';\nimport { scaleSqrt, max } from 'd3';\nimport { Marks } from './Marks';\nimport { Markscity } from './Markscity';\nimport { hexbin } from 'd3-hexbin';\nimport { geoNaturalEarth1 } from 'd3';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst sizeValue = d => d.HRV;\nexport const BubbleMap = ({\n  data,\n  worldAtlas\n}) => {\n  const projection = geoNaturalEarth1().center([10.537004, 52.210297]).scale(160000) // Adjust this for your data's scale\n  .translate([450, 300]); // Position in the center of your SVG\n\n  const hexbinGenerator = hexbin().size([900, 750]) // Match your SVG size\n  .radius(30); // Adjust radius for better visibility\n\n  // Filter out data with an HRV of 0\n  const validData = data.filter(d => d.HRV > 0);\n\n  // Map and project coordinates\n  const projectedData = validData.map(d => {\n    const coords = projection(d.coords);\n    console.log(\"Projected Coords:\", coords, \"HRV:\", d.HRV); // Check projected coordinates\n    return {\n      ...d,\n      coords\n    };\n  });\n\n  // Log ranges of projected coordinates\n  const xValues = projectedData.map(d => d.coords[0]);\n  const yValues = projectedData.map(d => d.coords[1]);\n  console.log(\"X range:\", Math.min(...xValues), Math.max(...xValues));\n  console.log(\"Y range:\", Math.min(...yValues), Math.max(...yValues));\n\n  // Generate hexbins\n  const bins = hexbinGenerator(projectedData);\n  console.log(\"Hex Bin Data:\", bins); // Check contents of bins\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Marks, {\n      bins: bins,\n      sizeValue: sizeValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Markscity, {\n      worldAtlas: worldAtlas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_c = BubbleMap;\nvar _c;\n$RefreshReg$(_c, \"BubbleMap\");","map":{"version":3,"names":["React","scaleSqrt","max","Marks","Markscity","hexbin","geoNaturalEarth1","jsxDEV","_jsxDEV","Fragment","_Fragment","sizeValue","d","HRV","BubbleMap","data","worldAtlas","projection","center","scale","translate","hexbinGenerator","size","radius","validData","filter","projectedData","map","coords","console","log","xValues","yValues","Math","min","bins","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js"],"sourcesContent":["import React from 'react';\nimport { scaleSqrt, max } from 'd3';\nimport { Marks } from './Marks';\nimport { Markscity } from './Markscity';\nimport { hexbin } from 'd3-hexbin';\nimport { geoNaturalEarth1 } from 'd3';\n\nconst sizeValue = d => d.HRV;\n\nexport const BubbleMap = ({ data, worldAtlas }) => {\n    const projection = geoNaturalEarth1()\n        .center([10.537004, 52.210297])\n        .scale(160000) // Adjust this for your data's scale\n        .translate([450, 300]); // Position in the center of your SVG\n\n    const hexbinGenerator = hexbin()\n        .size([900, 750]) // Match your SVG size\n        .radius(30); // Adjust radius for better visibility\n\n    // Filter out data with an HRV of 0\n    const validData = data.filter(d => d.HRV > 0);\n\n    // Map and project coordinates\n    const projectedData = validData.map(d => {\n        const coords = projection(d.coords);\n        console.log(\"Projected Coords:\", coords, \"HRV:\", d.HRV); // Check projected coordinates\n        return { ...d, coords };\n    });\n\n    // Log ranges of projected coordinates\n    const xValues = projectedData.map(d => d.coords[0]);\n    const yValues = projectedData.map(d => d.coords[1]);\n    console.log(\"X range:\", Math.min(...xValues), Math.max(...xValues));\n    console.log(\"Y range:\", Math.min(...yValues), Math.max(...yValues));\n\n    // Generate hexbins\n    const bins = hexbinGenerator(projectedData);\n    console.log(\"Hex Bin Data:\", bins); // Check contents of bins\n\n    return (\n        <>\n            <Marks bins={bins} sizeValue={sizeValue} />\n            <Markscity worldAtlas={worldAtlas} />\n        </>\n    );\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,GAAG,QAAQ,IAAI;AACnC,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,gBAAgB,QAAQ,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtC,MAAMC,SAAS,GAAGC,CAAC,IAAIA,CAAC,CAACC,GAAG;AAE5B,OAAO,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EAC/C,MAAMC,UAAU,GAAGX,gBAAgB,CAAC,CAAC,CAChCY,MAAM,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAC9BC,KAAK,CAAC,MAAM,CAAC,CAAC;EAAA,CACdC,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;;EAE5B,MAAMC,eAAe,GAAGhB,MAAM,CAAC,CAAC,CAC3BiB,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EAAA,CACjBC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEjB;EACA,MAAMC,SAAS,GAAGT,IAAI,CAACU,MAAM,CAACb,CAAC,IAAIA,CAAC,CAACC,GAAG,GAAG,CAAC,CAAC;;EAE7C;EACA,MAAMa,aAAa,GAAGF,SAAS,CAACG,GAAG,CAACf,CAAC,IAAI;IACrC,MAAMgB,MAAM,GAAGX,UAAU,CAACL,CAAC,CAACgB,MAAM,CAAC;IACnCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,MAAM,EAAE,MAAM,EAAEhB,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC;IACzD,OAAO;MAAE,GAAGD,CAAC;MAAEgB;IAAO,CAAC;EAC3B,CAAC,CAAC;;EAEF;EACA,MAAMG,OAAO,GAAGL,aAAa,CAACC,GAAG,CAACf,CAAC,IAAIA,CAAC,CAACgB,MAAM,CAAC,CAAC,CAAC,CAAC;EACnD,MAAMI,OAAO,GAAGN,aAAa,CAACC,GAAG,CAACf,CAAC,IAAIA,CAAC,CAACgB,MAAM,CAAC,CAAC,CAAC,CAAC;EACnDC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEG,IAAI,CAACC,GAAG,CAAC,GAAGH,OAAO,CAAC,EAAEE,IAAI,CAAC/B,GAAG,CAAC,GAAG6B,OAAO,CAAC,CAAC;EACnEF,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEG,IAAI,CAACC,GAAG,CAAC,GAAGF,OAAO,CAAC,EAAEC,IAAI,CAAC/B,GAAG,CAAC,GAAG8B,OAAO,CAAC,CAAC;;EAEnE;EACA,MAAMG,IAAI,GAAGd,eAAe,CAACK,aAAa,CAAC;EAC3CG,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEK,IAAI,CAAC,CAAC,CAAC;;EAEpC,oBACI3B,OAAA,CAAAE,SAAA;IAAA0B,QAAA,gBACI5B,OAAA,CAACL,KAAK;MAACgC,IAAI,EAAEA,IAAK;MAACxB,SAAS,EAAEA;IAAU;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3ChC,OAAA,CAACJ,SAAS;MAACY,UAAU,EAAEA;IAAW;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACvC,CAAC;AAEX,CAAC;AAACC,EAAA,GApCW3B,SAAS;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}