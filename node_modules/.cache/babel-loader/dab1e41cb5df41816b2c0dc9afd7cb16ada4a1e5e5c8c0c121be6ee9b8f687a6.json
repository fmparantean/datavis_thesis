{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useMap } from 'react-leaflet'; // Use context to access Leaflet map\nimport L from 'leaflet'; // Leaflet for mapping functionalities\nimport { hexbin } from 'd3-hexbin'; // Import hexbin from D3\nimport * as d3 from 'd3'; // Import D3 utilities\n\nexport const BubbleMap = ({\n  data\n}) => {\n  _s();\n  const map = useMap(); // Access the Leaflet map instance\n\n  useEffect(() => {\n    // Create hexbin generator\n    const hexbinGenerator = hexbin().radius(20) // Set hexagon radius\n    .x(d => d[0]) // Longitude accessor\n    .y(d => d[1]); // Latitude accessor\n\n    // Prepare points for hexbin\n    const points = data.map(feat => feat.coords); // Ensure coords is in [lng, lat] format already\n\n    // Generate hexagon bins from points\n    const bins = hexbinGenerator(points);\n\n    // Create a color scale for HRV values\n    const colorScale = d3.scaleLinear().domain([d3.min(data, d => d.HRV), d3.mean(data, d => d.HRV), d3.max(data, d => d.HRV)]).range(['lightblue', 'blue', 'darkblue']); // Set color range\n\n    // Create Leaflet layer group for hexagons\n    const hexbinLayer = L.layerGroup().addTo(map);\n\n    // Create hexagons for each bin and add to the map\n    bins.forEach(bin => {\n      const avgHRV = d3.mean(bin.map(d => data.find(feature => feature.coords[0] === d[0] && feature.coords[1] === d[1]).HRV));\n\n      // Generate hexagon vertices\n      const hexCoords = generateHexagon(bin.x, bin.y, 20); // Use hexagon generation\n\n      // Add hexagon shape to the map\n      L.polygon(hexCoords, {\n        color: colorScale(avgHRV),\n        fillColor: colorScale(avgHRV),\n        fillOpacity: 0.6,\n        weight: 1\n      }).addTo(hexbinLayer);\n    });\n    return () => {\n      // Cleanup: remove hexbin layer on component unmount to prevent memory leaks\n      if (map.hasLayer(hexbinLayer)) {\n        map.removeLayer(hexbinLayer);\n      }\n    };\n  }, [data, map]); // Effect dependencies\n\n  return null; // No direct rendering\n};\n\n// Function to generate hexagon vertices based on center coordinates and radius\n_s(BubbleMap, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = BubbleMap;\nconst generateHexagon = (lat, lng, radius) => {\n  const angle = Math.PI / 3; // 60 degrees for hexagon\n  const points = [];\n  for (let i = 0; i < 6; i++) {\n    points.push([lat + radius * Math.sin(angle * i),\n    // Latitude adjustment\n    lng + radius * Math.cos(angle * i) // Longitude adjustment\n    ]);\n  }\n  return points; // Return hexagon vertices\n};\nexport default BubbleMap;\nvar _c;\n$RefreshReg$(_c, \"BubbleMap\");","map":{"version":3,"names":["React","useEffect","useMap","L","hexbin","d3","BubbleMap","data","_s","map","hexbinGenerator","radius","x","d","y","points","feat","coords","bins","colorScale","scaleLinear","domain","min","HRV","mean","max","range","hexbinLayer","layerGroup","addTo","forEach","bin","avgHRV","find","feature","hexCoords","generateHexagon","polygon","color","fillColor","fillOpacity","weight","hasLayer","removeLayer","_c","lat","lng","angle","Math","PI","i","push","sin","cos","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useMap } from 'react-leaflet'; // Use context to access Leaflet map\nimport L from 'leaflet'; // Leaflet for mapping functionalities\nimport { hexbin } from 'd3-hexbin'; // Import hexbin from D3\nimport * as d3 from 'd3'; // Import D3 utilities\n\nexport const BubbleMap = ({ data }) => {\n    const map = useMap(); // Access the Leaflet map instance\n\n    useEffect(() => {\n        // Create hexbin generator\n        const hexbinGenerator = hexbin()\n            .radius(20) // Set hexagon radius\n            .x(d => d[0]) // Longitude accessor\n            .y(d => d[1]); // Latitude accessor\n\n        // Prepare points for hexbin\n        const points = data.map(feat => feat.coords); // Ensure coords is in [lng, lat] format already\n\n        // Generate hexagon bins from points\n        const bins = hexbinGenerator(points); \n\n        // Create a color scale for HRV values\n        const colorScale = d3.scaleLinear()\n            .domain([d3.min(data, d => d.HRV), d3.mean(data, d => d.HRV), d3.max(data, d => d.HRV)])\n            .range(['lightblue', 'blue', 'darkblue']); // Set color range\n\n        // Create Leaflet layer group for hexagons\n        const hexbinLayer = L.layerGroup().addTo(map); \n\n        // Create hexagons for each bin and add to the map\n        bins.forEach(bin => {\n            const avgHRV = d3.mean(bin.map(d => \n                data.find(feature => \n                    feature.coords[0] === d[0] && \n                    feature.coords[1] === d[1]).HRV\n            ));\n\n            // Generate hexagon vertices\n            const hexCoords = generateHexagon(bin.x, bin.y, 20); // Use hexagon generation\n\n            // Add hexagon shape to the map\n            L.polygon(hexCoords, {\n                color: colorScale(avgHRV),\n                fillColor: colorScale(avgHRV),\n                fillOpacity: 0.6,\n                weight: 1,\n            }).addTo(hexbinLayer); \n        });\n\n        return () => {\n            // Cleanup: remove hexbin layer on component unmount to prevent memory leaks\n            if (map.hasLayer(hexbinLayer)) {\n                map.removeLayer(hexbinLayer);\n            }\n        };\n    }, [data, map]); // Effect dependencies\n\n    return null; // No direct rendering\n};\n\n// Function to generate hexagon vertices based on center coordinates and radius\nconst generateHexagon = (lat, lng, radius) => {\n    const angle = Math.PI / 3; // 60 degrees for hexagon\n    const points = [];\n    for (let i = 0; i < 6; i++) {\n        points.push([\n            lat + (radius * Math.sin(angle * i)), // Latitude adjustment\n            lng + (radius * Math.cos(angle * i))  // Longitude adjustment\n        ]);\n    }\n    return points; // Return hexagon vertices\n};\n\nexport default BubbleMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}