{"ast":null,"code":"import{useState,useEffect}from'react';import{json}from'd3';import{feature,mesh}from'topojson-client';// Ensure d3-topology is installed\nconst jsonUrl='https://unpkg.com/world-atlas@2.0.2/countries-50m.json';export const useWorldAtlas=()=>{const[data,setData]=useState(null);const[error,setError]=useState(null);// Add error state\nconst[loading,setLoading]=useState(true);// Add loading state\nuseEffect(()=>{json(jsonUrl).then(topology=>{const{countries,land}=topology.objects;setData({land:feature(topology,land),interiors:mesh(topology,countries,(a,b)=>a!==b)});setLoading(false);// Set loading to false on success\n}).catch(err=>{console.error(\"Error loading world atlas data:\",err);setError(err);// Set error to enable error handling in components\nsetLoading(false);});},[]);return{data,loading,error};// Return loading and error states\n};","map":{"version":3,"names":["useState","useEffect","json","feature","mesh","jsonUrl","useWorldAtlas","data","setData","error","setError","loading","setLoading","then","topology","countries","land","objects","interiors","a","b","catch","err","console"],"sources":["/Users/fmparantean/Documents/dataviz_project/src/useWorldAtlas.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client'; // Ensure d3-topology is installed\n\nconst jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';\n\nexport const useWorldAtlas = () => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null); // Add error state\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  useEffect(() => {\n    json(jsonUrl)\n      .then(topology => {\n        const { countries, land } = topology.objects;\n        setData({\n          land: feature(topology, land),\n          interiors: mesh(topology, countries, (a, b) => a !== b)\n        });\n        setLoading(false); // Set loading to false on success\n      })\n      .catch(err => {\n        console.error(\"Error loading world atlas data:\", err);\n        setError(err); // Set error to enable error handling in components\n        setLoading(false);\n      });\n  }, []);\n\n  return { data, loading, error }; // Return loading and error states\n};"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,IAAI,KAAQ,IAAI,CACzB,OAASC,OAAO,CAAEC,IAAI,KAAQ,iBAAiB,CAAE;AAEjD,KAAM,CAAAC,OAAO,CAAG,wDAAwD,CAExE,MAAO,MAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CACjC,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACS,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAAE;AAC1C,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAE;AAE9CC,SAAS,CAAC,IAAM,CACdC,IAAI,CAACG,OAAO,CAAC,CACVQ,IAAI,CAACC,QAAQ,EAAI,CAChB,KAAM,CAAEC,SAAS,CAAEC,IAAK,CAAC,CAAGF,QAAQ,CAACG,OAAO,CAC5CT,OAAO,CAAC,CACNQ,IAAI,CAAEb,OAAO,CAACW,QAAQ,CAAEE,IAAI,CAAC,CAC7BE,SAAS,CAAEd,IAAI,CAACU,QAAQ,CAAEC,SAAS,CAAE,CAACI,CAAC,CAAEC,CAAC,GAAKD,CAAC,GAAKC,CAAC,CACxD,CAAC,CAAC,CACFR,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CAAC,CAAC,CACDS,KAAK,CAACC,GAAG,EAAI,CACZC,OAAO,CAACd,KAAK,CAAC,iCAAiC,CAAEa,GAAG,CAAC,CACrDZ,QAAQ,CAACY,GAAG,CAAC,CAAE;AACfV,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAC,CACN,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAEL,IAAI,CAAEI,OAAO,CAAEF,KAAM,CAAC,CAAE;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}