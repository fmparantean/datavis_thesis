{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual/src/DateHistogram/Marks.js\";\nimport { line, curveCardinal, scaleLinear } from 'd3';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Marks = ({\n  binnedData,\n  xScale,\n  yScale,\n  tooltipFormat,\n  innerHeight\n}) => {\n  console.log(\"Binned Data in Marks: \", binnedData); // Debugging line for binned data\n\n  // Early return if no data is available\n  if (binnedData.length === 0) {\n    return null;\n  }\n\n  // Create the line generator using the pre-defined scales\n  const lineGenerator = line().x((d, index) => xScale(d.x0 + (d.x1 - d.x0) / 2)) // Midpoint handling\n  .y(d => yScale(d.y)) // y value scaling\n  .curve(curveCardinal); // Using cardinal curve for smoother lines\n\n  // Create the line path using the line generator\n  const pathData = lineGenerator(binnedData);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"line\" // Class for styling\n      ,\n      d: pathData // Set the path data\n      ,\n      fill: \"none\",\n      stroke: \"steelblue\" // Line color\n      ,\n      strokeWidth: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), binnedData.map((d, index) => /*#__PURE__*/_jsxDEV(\"circle\", {\n      // Use x0 as a simple unique key; change as appropriate\n      cx: xScale(d.x0 + (d.x1 - d.x0) / 2),\n      cy: yScale(d.y),\n      r: 4 // Radius of the circle\n      ,\n      fill: \"red\" // Circle color\n      ,\n      stroke: \"black\" // Optional stroke for circles\n    }, d.x0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n};\n_c = Marks;\nvar _c;\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"names":["line","curveCardinal","scaleLinear","jsxDEV","_jsxDEV","Fragment","_Fragment","Marks","binnedData","xScale","yScale","tooltipFormat","innerHeight","console","log","length","lineGenerator","x","d","index","x0","x1","y","curve","pathData","children","className","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","map","cx","cy","r","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual/src/DateHistogram/Marks.js"],"sourcesContent":["import { line, curveCardinal, scaleLinear } from 'd3';\n\nexport const Marks = ({\n  binnedData,\n  xScale,\n  yScale,\n  tooltipFormat,\n  innerHeight\n}) => {\n  console.log(\"Binned Data in Marks: \", binnedData); // Debugging line for binned data\n\n  // Early return if no data is available\n  if (binnedData.length === 0) {\n    return null; \n  }\n\n  // Create the line generator using the pre-defined scales\n  const lineGenerator = line()\n      .x((d, index) => xScale(d.x0 + (d.x1 - d.x0) / 2)) // Midpoint handling\n      .y(d => yScale(d.y)) // y value scaling\n      .curve(curveCardinal); // Using cardinal curve for smoother lines\n\n  // Create the line path using the line generator\n  const pathData = lineGenerator(binnedData);\n\n  return (\n    <>\n      <path\n        className=\"line\" // Class for styling\n        d={pathData} // Set the path data\n        fill=\"none\"\n        stroke=\"steelblue\" // Line color\n        strokeWidth=\"2\"\n      />\n      {binnedData.map((d, index) => (\n        <circle\n          key={d.x0} // Use x0 as a simple unique key; change as appropriate\n          cx={xScale(d.x0 + (d.x1 - d.x0) / 2)}\n          cy={yScale(d.y)}\n          r={4} // Radius of the circle\n          fill=\"red\" // Circle color\n          stroke=\"black\" // Optional stroke for circles\n        />\n      ))}\n    </>\n  );\n};"],"mappings":";AAAA,SAASA,IAAI,EAAEC,aAAa,EAAEC,WAAW,QAAQ,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtD,OAAO,MAAMC,KAAK,GAAGA,CAAC;EACpBC,UAAU;EACVC,MAAM;EACNC,MAAM;EACNC,aAAa;EACbC;AACF,CAAC,KAAK;EACJC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEN,UAAU,CAAC,CAAC,CAAC;;EAEnD;EACA,IAAIA,UAAU,CAACO,MAAM,KAAK,CAAC,EAAE;IAC3B,OAAO,IAAI;EACb;;EAEA;EACA,MAAMC,aAAa,GAAGhB,IAAI,CAAC,CAAC,CACvBiB,CAAC,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKV,MAAM,CAACS,CAAC,CAACE,EAAE,GAAG,CAACF,CAAC,CAACG,EAAE,GAAGH,CAAC,CAACE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;EAAA,CAClDE,CAAC,CAACJ,CAAC,IAAIR,MAAM,CAACQ,CAAC,CAACI,CAAC,CAAC,CAAC,CAAC;EAAA,CACpBC,KAAK,CAACtB,aAAa,CAAC,CAAC,CAAC;;EAE3B;EACA,MAAMuB,QAAQ,GAAGR,aAAa,CAACR,UAAU,CAAC;EAE1C,oBACEJ,OAAA,CAAAE,SAAA;IAAAmB,QAAA,gBACErB,OAAA;MACEsB,SAAS,EAAC,MAAM,CAAC;MAAA;MACjBR,CAAC,EAAEM,QAAS,CAAC;MAAA;MACbG,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,WAAW,CAAC;MAAA;MACnBC,WAAW,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC,EACDzB,UAAU,CAAC0B,GAAG,CAAC,CAAChB,CAAC,EAAEC,KAAK,kBACvBf,OAAA;MACa;MACX+B,EAAE,EAAE1B,MAAM,CAACS,CAAC,CAACE,EAAE,GAAG,CAACF,CAAC,CAACG,EAAE,GAAGH,CAAC,CAACE,EAAE,IAAI,CAAC,CAAE;MACrCgB,EAAE,EAAE1B,MAAM,CAACQ,CAAC,CAACI,CAAC,CAAE;MAChBe,CAAC,EAAE,CAAE,CAAC;MAAA;MACNV,IAAI,EAAC,KAAK,CAAC;MAAA;MACXC,MAAM,EAAC,OAAO,CAAC;IAAA,GALVV,CAAC,CAACE,EAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMV,CACF,CAAC;EAAA,eACF,CAAC;AAEP,CAAC;AAACK,EAAA,GA5CW/B,KAAK;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}