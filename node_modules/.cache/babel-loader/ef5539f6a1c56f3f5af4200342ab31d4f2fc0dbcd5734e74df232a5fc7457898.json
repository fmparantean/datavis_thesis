{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\nconst jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';\nexport const useWorldAtlas = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    json(jsonUrl).then(topology => {\n      const {\n        countries,\n        land\n      } = topology.objects;\n      setData({\n        land: feature(topology, land),\n        interiors: mesh(topology, countries, (a, b) => a !== b)\n      });\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"Error loading world atlas data:\", err);\n      setError(err);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n_s(useWorldAtlas, \"cdnblwmK9QuMyYTkxGRQb1PLKRw=\");","map":{"version":3,"names":["useState","useEffect","json","feature","mesh","jsonUrl","useWorldAtlas","_s","data","setData","error","setError","loading","setLoading","then","topology","countries","land","objects","interiors","a","b","catch","err","console"],"sources":["/Users/fmparantean/Documents/datavis_thesis/src/useWorldAtlas.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client'; \n\nconst jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';\n\nexport const useWorldAtlas = () => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null); \n  const [loading, setLoading] = useState(true); \n\n  useEffect(() => {\n    json(jsonUrl)\n      .then(topology => {\n        const { countries, land } = topology.objects;\n        setData({\n          land: feature(topology, land),\n          interiors: mesh(topology, countries, (a, b) => a !== b)\n        });\n        setLoading(false); \n      })\n      .catch(err => {\n        console.error(\"Error loading world atlas data:\", err);\n        setError(err); \n        setLoading(false);\n      });\n  }, []);\n\n  return { data, loading, error }; \n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,IAAI,QAAQ,IAAI;AACzB,SAASC,OAAO,EAAEC,IAAI,QAAQ,iBAAiB;AAE/C,MAAMC,OAAO,GAAG,wDAAwD;AAExE,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdC,IAAI,CAACG,OAAO,CAAC,CACVS,IAAI,CAACC,QAAQ,IAAI;MAChB,MAAM;QAAEC,SAAS;QAAEC;MAAK,CAAC,GAAGF,QAAQ,CAACG,OAAO;MAC5CT,OAAO,CAAC;QACNQ,IAAI,EAAEd,OAAO,CAACY,QAAQ,EAAEE,IAAI,CAAC;QAC7BE,SAAS,EAAEf,IAAI,CAACW,QAAQ,EAAEC,SAAS,EAAE,CAACI,CAAC,EAAEC,CAAC,KAAKD,CAAC,KAAKC,CAAC;MACxD,CAAC,CAAC;MACFR,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDS,KAAK,CAACC,GAAG,IAAI;MACZC,OAAO,CAACd,KAAK,CAAC,iCAAiC,EAAEa,GAAG,CAAC;MACrDZ,QAAQ,CAACY,GAAG,CAAC;MACbV,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEL,IAAI;IAAEI,OAAO;IAAEF;EAAM,CAAC;AACjC,CAAC;AAACH,EAAA,CAvBWD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}