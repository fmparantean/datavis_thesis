{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/Marks.js\";\nimport { hexbin as d3Hexbin } from 'd3-hexbin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst hexbin = d3Hexbin(); // Instantiate hexbin generator\n\nexport const Marks = ({\n  bins\n}) => {\n  console.log(\"Bins passed to Marks:\", bins); // Log the received bins\n\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"marks\",\n    children: bins.map((bin, i) => {\n      if (bin.length === 0) {\n        console.log(\"Empty bin ignored:\", i); // Log any skipped bins\n        return null;\n      }\n      const centroid = hexbin.centroid(bin); // Get centroid for each bin\n      console.log(\"Centroid for bin:\", centroid); // Log centroids\n\n      return /*#__PURE__*/_jsxDEV(\"path\", {\n        // Ensure keys are unique\n        d: hexbin.hexagon(30) // Create hexagon shape\n        ,\n        transform: `translate(${centroid[0]}, ${centroid[1]})` // Position the hexagon\n        ,\n        fill: \"orange\" // Set fill color\n        ,\n        stroke: \"black\" // Stroke color for visibility\n        ,\n        strokeWidth: 1 // Stroke width\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n_c = Marks;\nvar _c;\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"names":["hexbin","d3Hexbin","jsxDEV","_jsxDEV","Marks","bins","console","log","className","children","map","bin","i","length","centroid","d","hexagon","transform","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 3/src/BubbleMap/Marks.js"],"sourcesContent":["import { hexbin as d3Hexbin } from 'd3-hexbin';\n\nconst hexbin = d3Hexbin(); // Instantiate hexbin generator\n\nexport const Marks = ({ bins }) => {\n    console.log(\"Bins passed to Marks:\", bins); // Log the received bins\n\n    return (\n        <g className=\"marks\">\n            {bins.map((bin, i) => {\n                if (bin.length === 0) {\n                    console.log(\"Empty bin ignored:\", i); // Log any skipped bins\n                    return null; \n                }\n\n                const centroid = hexbin.centroid(bin); // Get centroid for each bin\n                console.log(\"Centroid for bin:\", centroid); // Log centroids\n\n                return (\n                    <path\n                        key={i} // Ensure keys are unique\n                        d={hexbin.hexagon(30)} // Create hexagon shape\n                        transform={`translate(${centroid[0]}, ${centroid[1]})`} // Position the hexagon\n                        fill=\"orange\" // Set fill color\n                        stroke=\"black\" // Stroke color for visibility\n                        strokeWidth={1} // Stroke width\n                    />\n                );\n            })}\n        </g>\n    );\n};"],"mappings":";AAAA,SAASA,MAAM,IAAIC,QAAQ,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMH,MAAM,GAAGC,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAE3B,OAAO,MAAMG,KAAK,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC/BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,IAAI,CAAC,CAAC,CAAC;;EAE5C,oBACIF,OAAA;IAAGK,SAAS,EAAC,OAAO;IAAAC,QAAA,EACfJ,IAAI,CAACK,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAClB,IAAID,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE;QAClBP,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,IAAI;MACf;MAEA,MAAME,QAAQ,GAAGd,MAAM,CAACc,QAAQ,CAACH,GAAG,CAAC,CAAC,CAAC;MACvCL,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEO,QAAQ,CAAC,CAAC,CAAC;;MAE5C,oBACIX,OAAA;QACY;QACRY,CAAC,EAAEf,MAAM,CAACgB,OAAO,CAAC,EAAE,CAAE,CAAC;QAAA;QACvBC,SAAS,EAAE,aAAaH,QAAQ,CAAC,CAAC,CAAC,KAAKA,QAAQ,CAAC,CAAC,CAAC,GAAI,CAAC;QAAA;QACxDI,IAAI,EAAC,QAAQ,CAAC;QAAA;QACdC,MAAM,EAAC,OAAO,CAAC;QAAA;QACfC,WAAW,EAAE,CAAE,CAAC;MAAA,GALXR,CAAC;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMT,CAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ,CAAC;AAACC,EAAA,GA3BWrB,KAAK;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}