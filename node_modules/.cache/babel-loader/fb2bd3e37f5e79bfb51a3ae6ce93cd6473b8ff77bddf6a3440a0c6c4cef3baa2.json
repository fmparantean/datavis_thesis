{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/Desktop/mixvisual 2/src/BubbleMap/index.js\";\nimport React from 'react';\nimport { scaleSqrt, max, hexbin } from 'd3';\nimport { Marks } from './Marks';\nimport { Markscity } from './Markscity';\nimport { geoNaturalEarth1 } from 'd3';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst sizeValue = d => d.HRV; // Use this function to get HRV for each data point\n\nexport const BubbleMap = ({\n  data,\n  worldAtlas\n}) => {\n  const maxRadius = 10;\n  const sizeScale = scaleSqrt().domain([0, max(data, sizeValue)]).range([0, maxRadius]);\n\n  // Set up the hexbin layout\n  const hexbinGenerator = hexbin().radius(10) // Set the radius for hexagons\n  .x(d => d.coords[0]) // Longitude\n  .y(d => d.coords[1]); // Latitude\n\n  // Generate hexagonal bins\n  const bins = hexbinGenerator(data.map(d => {\n    return {\n      coords: [d.longitude, d.latitude]\n    }; // Ensure data has lat/lng coords\n  }));\n\n  // Create color scale based on HRV values\n  const colorScale = d3.scaleSequential().domain([0, max(data, sizeValue)]).interpolator(d3.interpolateYlOrRd); // Color interpolation\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Marks, {\n      worldAtlas: worldAtlas,\n      data: data,\n      sizeScale: sizeScale,\n      sizeValue: sizeValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"markscity\",\n      children: bins.map((bin, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          d: d3.hexbin().hexagon(hexbinGenerator.radius()) // Draw the hexagon\n          ,\n          transform: `translate(${bin.x}, ${bin.y})` // Position the hexagon\n          ,\n          fill: colorScale(bin.length) // Color based on count\n          ,\n          stroke: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"title\", {\n          children: `${bin.length} stores\\nMedian HRV: ${d3.median(bin, d => sizeValue(d))}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = BubbleMap;\nvar _c;\n$RefreshReg$(_c, \"BubbleMap\");","map":{"version":3,"names":["React","scaleSqrt","max","hexbin","Marks","Markscity","geoNaturalEarth1","jsxDEV","_jsxDEV","Fragment","_Fragment","sizeValue","d","HRV","BubbleMap","data","worldAtlas","maxRadius","sizeScale","domain","range","hexbinGenerator","radius","x","coords","y","bins","map","longitude","latitude","colorScale","d3","scaleSequential","interpolator","interpolateYlOrRd","children","fileName","_jsxFileName","lineNumber","columnNumber","className","bin","index","hexagon","transform","fill","length","stroke","median","_c","$RefreshReg$"],"sources":["/Users/fmparantean/Desktop/mixvisual 2/src/BubbleMap/index.js"],"sourcesContent":["import React from 'react';\nimport { scaleSqrt, max, hexbin } from 'd3';\nimport { Marks } from './Marks';\nimport { Markscity } from './Markscity';\nimport { geoNaturalEarth1 } from 'd3';\n\nconst sizeValue = d => d.HRV; // Use this function to get HRV for each data point\n\nexport const BubbleMap = ({ data, worldAtlas }) => {\n  const maxRadius = 10;\n\n  const sizeScale = scaleSqrt()\n    .domain([0, max(data, sizeValue)])\n    .range([0, maxRadius]);\n\n  // Set up the hexbin layout\n  const hexbinGenerator = hexbin()\n    .radius(10) // Set the radius for hexagons\n    .x(d => d.coords[0]) // Longitude\n    .y(d => d.coords[1]); // Latitude\n\n  // Generate hexagonal bins\n  const bins = hexbinGenerator(data.map(d => {\n    return { coords: [d.longitude, d.latitude] }; // Ensure data has lat/lng coords\n  }));\n\n  // Create color scale based on HRV values\n  const colorScale = d3.scaleSequential()\n    .domain([0, max(data, sizeValue)])\n    .interpolator(d3.interpolateYlOrRd); // Color interpolation\n\n  return (\n    <>\n      <Marks\n        worldAtlas={worldAtlas}\n        data={data}\n        sizeScale={sizeScale}\n        sizeValue={sizeValue}\n      />\n      <g className=\"markscity\">\n        {bins.map((bin, index) => (\n          <g key={index}>\n            <path\n              d={d3.hexbin().hexagon(hexbinGenerator.radius())} // Draw the hexagon\n              transform={`translate(${bin.x}, ${bin.y})`} // Position the hexagon\n              fill={colorScale(bin.length)} // Color based on count\n              stroke=\"black\"\n            />\n            <title>\n              {`${bin.length} stores\\nMedian HRV: ${d3.median(bin, d => sizeValue(d))}`}\n            </title>\n          </g>\n        ))}\n      </g>\n    </>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}