{"ast":null,"code":"var _jsxFileName = \"/Users/fmparantean/bubblemap/src/BubbleMap/Marks.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { geoNaturalEarth1, geoPath, geoGraticule, zoom, select } from 'd3'; // Import select and zoom\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projection = geoNaturalEarth1();\n// .scale(5000) // Adjust as needed to zoom in\n// .translate([-400, 250]); // Adjust to focus the map on Germany (or desired region)\n\nconst path = geoPath(projection);\nconst graticule = geoGraticule();\nexport const Marks = ({\n  worldAtlas: {\n    land,\n    interiors\n  },\n  data,\n  sizeScale,\n  sizeValue,\n  width,\n  // Receive width prop\n  height // Receive height prop\n}) => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    const svg = select(svgRef.current); // Get the current SVG\n\n    const zoomBehavior = zoom().scaleExtent([1, 8]) // Minimum and maximum zoom\n    .on('zoom', event => {\n      svg.selectAll('.marks').attr('transform', event.transform); // Apply zoom\n    });\n    svg.call(zoomBehavior); // Bind the zoom behavior to the SVG\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    ref: svgRef,\n    className: \"marks\",\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"sphere\",\n      d: path({\n        type: 'Sphere'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"graticules\",\n      d: path(graticule())\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), land.features.map(feature => /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"land\",\n      // Ensure uniqueness for the keys\n      d: path(feature),\n      style: {\n        fill: '#ececec'\n      } // Light fill color for land\n    }, feature.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"path\", {\n      className: \"interiors\",\n      d: path(interiors),\n      style: {\n        fill: 'none',\n        stroke: '#d9dfe0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), data.map(d => {\n      const [x, y] = projection(d.coords);\n      const radius = sizeScale(sizeValue(d));\n      return /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: x,\n        cy: y,\n        r: radius,\n        style: {\n          fill: '#4a90e2',\n          opacity: 0.7\n        } // Circle color\n      }, `${d['Reported Date']}-${d.coords.join(',')}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Marks, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = Marks;\nvar _c;\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"names":["React","useEffect","useRef","geoNaturalEarth1","geoPath","geoGraticule","zoom","select","jsxDEV","_jsxDEV","projection","path","graticule","Marks","worldAtlas","land","interiors","data","sizeScale","sizeValue","width","height","_s","svgRef","svg","current","zoomBehavior","scaleExtent","on","event","selectAll","attr","transform","call","ref","className","children","d","type","fileName","_jsxFileName","lineNumber","columnNumber","features","map","feature","style","fill","id","stroke","x","y","coords","radius","cx","cy","r","opacity","join","_c","$RefreshReg$"],"sources":["/Users/fmparantean/bubblemap/src/BubbleMap/Marks.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { geoNaturalEarth1, geoPath, geoGraticule, zoom, select } from 'd3'; // Import select and zoom\n\nconst projection = geoNaturalEarth1();\n  // .scale(5000) // Adjust as needed to zoom in\n  // .translate([-400, 250]); // Adjust to focus the map on Germany (or desired region)\n\nconst path = geoPath(projection);\nconst graticule = geoGraticule();\n\nexport const Marks = ({\n  worldAtlas: { land, interiors },\n  data,\n  sizeScale,\n  sizeValue,\n  width, // Receive width prop\n  height // Receive height prop\n}) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    const svg = select(svgRef.current); // Get the current SVG\n\n    const zoomBehavior = zoom()\n      .scaleExtent([1, 8]) // Minimum and maximum zoom\n      .on('zoom', (event) => {\n        svg.selectAll('.marks').attr('transform', event.transform); // Apply zoom\n      });\n\n    svg.call(zoomBehavior); // Bind the zoom behavior to the SVG\n  }, []);\n\n  return (\n    <g ref={svgRef} className=\"marks\">\n      <path className=\"sphere\" d={path({ type: 'Sphere' })} />\n      <path className=\"graticules\" d={path(graticule())} />\n      {land.features.map(feature => (\n        <path\n          className=\"land\"\n          key={feature.id} // Ensure uniqueness for the keys\n          d={path(feature)}\n          style={{ fill: '#ececec' }} // Light fill color for land\n        />\n      ))}\n      <path className=\"interiors\" d={path(interiors)} style={{ fill: 'none', stroke: '#d9dfe0' }} />\n      {data.map(d => {\n        const [x, y] = projection(d.coords);\n        const radius = sizeScale(sizeValue(d));\n        return (\n          <circle\n            key={`${d['Reported Date']}-${d.coords.join(',')}`}\n            cx={x}\n            cy={y}\n            r={radius}\n            style={{ fill: '#4a90e2', opacity: 0.7 }} // Circle color\n          />\n        );\n      })}\n    </g>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}